{
    "baseUri": "https://discordapp.com/api/v6",
    "version": 6,
    "operations": {
        "guild": {
            "createGuild": {
                "link": "https://discordapp.com/developers/docs/resources/guild#create-guild",
                "resource": "guild",
                "name": "Create Guild",
                "method": "POST",
                "url": "/guilds",
                "description": "Create a new guild.  Fires a Guild Create Gateway event.",
                "responseNote": "Returns a guild object on success.",
                "responseTypes": [
                    {
                        "name": "guild",
                        "type": "guild/guild"
                    }
                ],
                "parameters": {
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the guild (2-100 characters)"
                    },
                    "region?": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "voice region id (deprecated)"
                    },
                    "icon?": {
                        "location": "json",
                        "type": "image data",
                        "description": "base64 128x128 image for the guild icon"
                    },
                    "verification_level?": {
                        "location": "json",
                        "type": "integer",
                        "description": "verification level"
                    },
                    "default_message_notifications?": {
                        "location": "json",
                        "type": "integer",
                        "description": "default message notification level"
                    },
                    "explicit_content_filter?": {
                        "location": "json",
                        "type": "integer",
                        "description": "explicit content filter level"
                    },
                    "roles?": {
                        "location": "json",
                        "type": "array",
                        "description": "new guild roles"
                    },
                    "channels?": {
                        "location": "json",
                        "type": "array",
                        "description": "new guild's channels"
                    },
                    "afk_channel_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id for afk channel"
                    },
                    "afk_timeout?": {
                        "location": "json",
                        "type": "integer",
                        "description": "afk timeout in seconds"
                    },
                    "system_channel_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the channel where guild notices such as welcome messages and boost events are posted"
                    },
                    "system_channel_flags?": {
                        "location": "json",
                        "type": "integer",
                        "description": "system channel flags"
                    }
                },
                "parametersArray": false
            },
            "getGuild": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild",
                "resource": "guild",
                "name": "Get Guild",
                "method": "GET",
                "url": "/guilds/{guild.id}",
                "description": "If with_counts is set to true, this endpoint will also return approximate_member_count and approximate_presence_count for the guild.",
                "responseNote": "Returns the guild object for the given id.",
                "responseTypes": [
                    {
                        "name": "guild",
                        "type": "guild/guild"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "with_counts?": {
                        "location": "query",
                        "type": "boolean",
                        "description": "when true, will return approximate member and presence counts for the guild",
                        "default": false,
                        "extra": {
                            "Required": "false"
                        }
                    }
                },
                "parametersArray": false
            },
            "getGuildPreview": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-preview",
                "resource": "guild",
                "name": "Get Guild Preview",
                "method": "GET",
                "url": "/guilds/{guild.id}/preview",
                "description": "If the user is not in the guild, then the guild must be lurkable (it must be Discoverable or have a live public stage).",
                "responseNote": "Returns the guild preview object for the given id.",
                "responseTypes": [
                    {
                        "name": "guild preview",
                        "type": "guild/guild-preview"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyGuild": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild",
                "resource": "guild",
                "name": "Modify Guild",
                "method": "PATCH",
                "url": "/guilds/{guild.id}",
                "description": "Modify a guild's settings. Requires the MANAGE_GUILD permission.  Fires a Guild Update Gateway event.",
                "responseNote": "Returns the updated guild object on success.",
                "responseTypes": [
                    {
                        "name": "guild",
                        "type": "guild/guild"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "guild name"
                    },
                    "region": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "guild voice region id (deprecated)"
                    },
                    "verification_level": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "verification level"
                    },
                    "default_message_notifications": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "default message notification level"
                    },
                    "explicit_content_filter": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "explicit content filter level"
                    },
                    "afk_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "id for afk channel"
                    },
                    "afk_timeout": {
                        "location": "json",
                        "type": "integer",
                        "description": "afk timeout in seconds"
                    },
                    "icon": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 1024x1024 png/jpeg/gif image for the guild icon (can be animated gif when the server has the ANIMATED_ICON feature)"
                    },
                    "owner_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "user id to transfer guild ownership to (must be owner)"
                    },
                    "splash": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 16:9 png/jpeg image for the guild splash (when the server has the INVITE_SPLASH feature)"
                    },
                    "discovery_splash": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 16:9 png/jpeg image for the guild discovery splash (when the server has the DISCOVERABLE feature)"
                    },
                    "banner": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 16:9 png/jpeg image for the guild banner (when the server has the BANNER feature)"
                    },
                    "system_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where guild notices such as welcome messages and boost events are posted"
                    },
                    "system_channel_flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "system channel flags"
                    },
                    "rules_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where Community guilds display rules and/or guidelines"
                    },
                    "public_updates_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where admins and moderators of Community guilds receive notices from Discord"
                    },
                    "preferred_locale": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the preferred locale of a Community guild used in server discovery and notices from Discord; defaults to \"en-US\""
                    },
                    "features": {
                        "location": "json",
                        "type": "array",
                        "description": "enabled guild features"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the description for the guild, if the guild is discoverable"
                    }
                },
                "parametersArray": false
            },
            "deleteGuild": {
                "link": "https://discordapp.com/developers/docs/resources/guild#delete-guild",
                "resource": "guild",
                "name": "Delete Guild",
                "method": "DELETE",
                "url": "/guilds/{guild.id}",
                "description": "Delete a guild permanently. User must be owner.  Fires a Guild Delete Gateway event.",
                "responseNote": "Returns 204 No Content on success.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildChannels": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-channels",
                "resource": "guild",
                "name": "Get Guild Channels",
                "method": "GET",
                "url": "/guilds/{guild.id}/channels",
                "description": "Does not include threads.",
                "responseNote": "Returns a list of guild channel objects.",
                "responseTypes": [
                    {
                        "name": "channel",
                        "type": "Array<channel/channel>"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createGuildChannel": {
                "link": "https://discordapp.com/developers/docs/resources/guild#create-guild-channel",
                "resource": "guild",
                "name": "Create Guild Channel",
                "method": "POST",
                "url": "/guilds/{guild.id}/channels",
                "description": "Create a new channel object for the guild. Requires the MANAGE_CHANNELS permission. If setting permission overwrites, only permissions your bot has in the guild can be allowed/denied. Setting MANAGE_ROLES permission in channels is only possible for guild administrators.  Fires a Channel Create Gateway event.",
                "responseNote": "Returns the new channel object on success.",
                "responseTypes": [
                    {
                        "name": "channel",
                        "type": "channel/channel"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "channel name (1-100 characters)"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of channel"
                    },
                    "topic": {
                        "location": "json",
                        "type": "string",
                        "description": "channel topic (0-1024 characters)"
                    },
                    "bitrate": {
                        "location": "json",
                        "type": "integer",
                        "description": "the bitrate (in bits) of the voice channel (voice only)"
                    },
                    "user_limit": {
                        "location": "json",
                        "type": "integer",
                        "description": "the user limit of the voice channel (voice only)"
                    },
                    "rate_limit_per_user": {
                        "location": "json",
                        "type": "integer",
                        "description": "amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected"
                    },
                    "position": {
                        "location": "json",
                        "type": "integer",
                        "description": "sorting position of the channel"
                    },
                    "permission_overwrites": {
                        "location": "json",
                        "type": "array",
                        "description": "the channel's permission overwrites"
                    },
                    "parent_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the parent category for a channel"
                    },
                    "nsfw": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the channel is nsfw",
                        "default": false
                    }
                },
                "parametersArray": false
            },
            "modifyGuildChannelPositions": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild-channel-positions",
                "resource": "guild",
                "name": "Modify Guild Channel Positions",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/channels",
                "description": "Modify the positions of a set of channel objects for the guild. Requires MANAGE_CHANNELS permission.  Fires multiple Channel Update Gateway events.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "channel id"
                    },
                    "position": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "sorting position of the channel"
                    },
                    "lock_permissions": {
                        "location": "json",
                        "type": "boolean",
                        "nullable": true,
                        "description": "syncs the permission overwrites with the new parent, if moving to a new category",
                        "default": false
                    },
                    "parent_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the new parent ID for the channel that is moved"
                    }
                },
                "parametersArray": false
            },
            "getGuildMember": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-member",
                "resource": "guild",
                "name": "Get Guild Member",
                "method": "GET",
                "url": "/guilds/{guild.id}/members/{user.id}",
                "description": "",
                "responseNote": "Returns a guild member object for the specified user.",
                "responseTypes": [
                    {
                        "name": "guild member",
                        "type": "guild/guild-member"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "listGuildMembers": {
                "link": "https://discordapp.com/developers/docs/resources/guild#list-guild-members",
                "resource": "guild",
                "name": "List Guild Members",
                "method": "GET",
                "url": "/guilds/{guild.id}/members",
                "description": "",
                "responseNote": "Returns a list of guild member objects that are members of the guild.",
                "responseTypes": [
                    {
                        "name": "guild member",
                        "type": "Array<guild/guild-member>"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of members to return (1-1000)",
                        "default": 1
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "the highest user id in the previous page"
                    }
                },
                "parametersArray": false
            },
            "searchGuildMembers": {
                "link": "https://discordapp.com/developers/docs/resources/guild#search-guild-members",
                "resource": "guild",
                "name": "Search Guild Members",
                "method": "GET",
                "url": "/guilds/{guild.id}/members/search",
                "description": "",
                "responseNote": "Returns a list of guild member objects whose username or nickname starts with a provided string.",
                "responseTypes": [
                    {
                        "name": "guild member",
                        "type": "Array<guild/guild-member>"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "query": {
                        "location": "query",
                        "type": "string",
                        "description": "Query string to match username(s) and nickname(s) against.",
                        "default": ""
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of members to return (1-1000)",
                        "default": 1
                    }
                },
                "parametersArray": false
            },
            "addGuildMember": {
                "link": "https://discordapp.com/developers/docs/resources/guild#add-guild-member",
                "resource": "guild",
                "name": "Add Guild Member",
                "method": "PUT",
                "url": "/guilds/{guild.id}/members/{user.id}",
                "description": "Adds a user to the guild, provided you have a valid oauth2 access token for the user with the guilds.join scope.  Fires a Guild Member Add Gateway event.",
                "responseNote": "Returns a 201 Created with the guild member as the body, or 204 No Content if the user is already a member of the guild.",
                "responseTypes": [
                    {
                        "name": "guild member",
                        "type": "guild/guild-member"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "access_token": {
                        "location": "json",
                        "type": "string",
                        "description": "an oauth2 access token granted with the guilds.join to the bot's application for the user you want to add to the guild",
                        "extra": {
                            "Permission": ""
                        }
                    },
                    "nick": {
                        "location": "json",
                        "type": "string",
                        "description": "value to set users nickname to",
                        "extra": {
                            "Permission": "MANAGE_NICKNAMES"
                        }
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "array of role ids the member is assigned",
                        "extra": {
                            "Permission": "MANAGE_ROLES"
                        }
                    },
                    "mute": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is muted in voice channels",
                        "default": false,
                        "extra": {
                            "Permission": "MUTE_MEMBERS"
                        }
                    },
                    "deaf": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is deafened in voice channels",
                        "default": false,
                        "extra": {
                            "Permission": "DEAFEN_MEMBERS"
                        }
                    }
                },
                "parametersArray": false
            },
            "modifyGuildMember": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild-member",
                "resource": "guild",
                "name": "Modify Guild Member",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/members/{user.id}",
                "description": "Modify attributes of a guild member.  Fires a Guild Member Update Gateway event. If the channel_id is set to null, this will force the target user to be disconnected from voice.",
                "responseNote": "Returns a 200 OK with the guild member as the body.",
                "responseTypes": [
                    {
                        "name": "guild member",
                        "type": "guild/guild-member"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "nick": {
                        "location": "json",
                        "type": "string",
                        "description": "value to set users nickname to",
                        "extra": {
                            "Permission": "MANAGE_NICKNAMES"
                        }
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "array of role ids the member is assigned",
                        "extra": {
                            "Permission": "MANAGE_ROLES"
                        }
                    },
                    "mute": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is muted in voice channels. Will throw a 400 if the user is not in a voice channel",
                        "default": false,
                        "extra": {
                            "Permission": "MUTE_MEMBERS"
                        }
                    },
                    "deaf": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is deafened in voice channels. Will throw a 400 if the user is not in a voice channel",
                        "default": false,
                        "extra": {
                            "Permission": "DEAFEN_MEMBERS"
                        }
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of channel to move user to (if they are connected to voice)",
                        "extra": {
                            "Permission": "MOVE_MEMBERS"
                        }
                    }
                },
                "parametersArray": false
            },
            "modifyCurrentUserNick": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-current-user-nick",
                "resource": "guild",
                "name": "Modify Current User Nick",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/members/@me/nick",
                "description": "Modifies the nickname of the current user in a guild.  Fires a Guild Member Update Gateway event.",
                "responseNote": "Returns a 200 with the nickname on success.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "?nick": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "value to set users nickname to",
                        "extra": {
                            "Permission": "CHANGE_NICKNAME"
                        }
                    }
                },
                "parametersArray": false
            },
            "addGuildMemberRole": {
                "link": "https://discordapp.com/developers/docs/resources/guild#add-guild-member-role",
                "resource": "guild",
                "name": "Add Guild Member Role",
                "method": "PUT",
                "url": "/guilds/{guild.id}/members/{user.id}/roles/{role.id}",
                "description": "Adds a role to a guild member. Requires the MANAGE_ROLES permission.  Fires a Guild Member Update Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "role.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "removeGuildMemberRole": {
                "link": "https://discordapp.com/developers/docs/resources/guild#remove-guild-member-role",
                "resource": "guild",
                "name": "Remove Guild Member Role",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/members/{user.id}/roles/{role.id}",
                "description": "Removes a role from a guild member. Requires the MANAGE_ROLES permission.  Fires a Guild Member Update Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "role.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "removeGuildMember": {
                "link": "https://discordapp.com/developers/docs/resources/guild#remove-guild-member",
                "resource": "guild",
                "name": "Remove Guild Member",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/members/{user.id}",
                "description": "Remove a member from a guild. Requires KICK_MEMBERS permission.  Fires a Guild Member Remove Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildBans": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-bans",
                "resource": "guild",
                "name": "Get Guild Bans",
                "method": "GET",
                "url": "/guilds/{guild.id}/bans",
                "description": "Requires the BAN_MEMBERS permission.",
                "responseNote": "Returns a list of ban objects for the users banned from this guild.",
                "responseTypes": [
                    {
                        "name": "ban",
                        "type": "Array<guild/ban>"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildBan": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-ban",
                "resource": "guild",
                "name": "Get Guild Ban",
                "method": "GET",
                "url": "/guilds/{guild.id}/bans/{user.id}",
                "description": "Requires the BAN_MEMBERS permission.",
                "responseNote": "Returns a ban object for the given user or a 404 not found if the ban cannot be found.",
                "responseTypes": [
                    {
                        "name": "ban",
                        "type": "guild/ban"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createGuildBan": {
                "link": "https://discordapp.com/developers/docs/resources/guild#create-guild-ban",
                "resource": "guild",
                "name": "Create Guild Ban",
                "method": "PUT",
                "url": "/guilds/{guild.id}/bans/{user.id}",
                "description": "Create a guild ban, and optionally delete previous messages sent by the banned user. Requires the BAN_MEMBERS permission.  Fires a Guild Ban Add Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "delete_message_days?": {
                        "location": "json",
                        "type": "integer",
                        "description": "number of days to delete messages for (0-7)"
                    },
                    "reason?": {
                        "location": "json",
                        "type": "string",
                        "description": "reason for the ban"
                    }
                },
                "parametersArray": false
            },
            "removeGuildBan": {
                "link": "https://discordapp.com/developers/docs/resources/guild#remove-guild-ban",
                "resource": "guild",
                "name": "Remove Guild Ban",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/bans/{user.id}",
                "description": "Remove the ban for a user. Requires the BAN_MEMBERS permissions.  Fires a Guild Ban Remove Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildRoles": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-roles",
                "resource": "guild",
                "name": "Get Guild Roles",
                "method": "GET",
                "url": "/guilds/{guild.id}/roles",
                "description": "",
                "responseNote": "Returns a list of role objects for the guild.",
                "responseTypes": [
                    {
                        "name": "role",
                        "type": "Array<permissions/role>"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createGuildRole": {
                "link": "https://discordapp.com/developers/docs/resources/guild#create-guild-role",
                "resource": "guild",
                "name": "Create Guild Role",
                "method": "POST",
                "url": "/guilds/{guild.id}/roles",
                "description": "Create a new role for the guild. Requires the MANAGE_ROLES permission.  Fires a Guild Role Create Gateway event. All JSON params are optional.",
                "responseNote": "Returns the new role object on success.",
                "responseTypes": [
                    {
                        "name": "role",
                        "type": "permissions/role"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the role",
                        "default": "\"new role\""
                    },
                    "permissions": {
                        "location": "json",
                        "type": "string",
                        "description": "bitwise value of the enabled/disabled permissions",
                        "default": "@everyone permissions in guild"
                    },
                    "color": {
                        "location": "json",
                        "type": "integer",
                        "description": "RGB color value",
                        "default": 0
                    },
                    "hoist": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the role should be displayed separately in the sidebar",
                        "default": false
                    },
                    "mentionable": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the role should be mentionable",
                        "default": false
                    }
                },
                "parametersArray": false
            },
            "modifyGuildRolePositions": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild-role-positions",
                "resource": "guild",
                "name": "Modify Guild Role Positions",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/roles",
                "description": "Modify the positions of a set of role objects for the guild. Requires the MANAGE_ROLES permission.  Fires multiple Guild Role Update Gateway events.",
                "responseNote": "Returns a list of all of the guild's role objects on success.",
                "responseTypes": [
                    {
                        "name": "role",
                        "type": "Array<permissions/role>"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "role"
                    },
                    "?position": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "sorting position of the role"
                    }
                },
                "parametersArray": false
            },
            "modifyGuildRole": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild-role",
                "resource": "guild",
                "name": "Modify Guild Role",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/roles/{role.id}",
                "description": "Modify a guild role. Requires the MANAGE_ROLES permission.  Fires a Guild Role Update Gateway event.",
                "responseNote": "Returns the updated role on success.",
                "responseTypes": [
                    {
                        "name": "role",
                        "type": "permissions/role"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "role.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the role"
                    },
                    "permissions": {
                        "location": "json",
                        "type": "string",
                        "description": "bitwise value of the enabled/disabled permissions"
                    },
                    "color": {
                        "location": "json",
                        "type": "integer",
                        "description": "RGB color value"
                    },
                    "hoist": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the role should be displayed separately in the sidebar",
                        "default": false
                    },
                    "mentionable": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the role should be mentionable",
                        "default": false
                    }
                },
                "parametersArray": false
            },
            "deleteGuildRole": {
                "link": "https://discordapp.com/developers/docs/resources/guild#delete-guild-role",
                "resource": "guild",
                "name": "Delete Guild Role",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/roles/{role.id}",
                "description": "Delete a guild role. Requires the MANAGE_ROLES permission.  Fires a Guild Role Delete Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "role.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildPruneCount": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-prune-count",
                "resource": "guild",
                "name": "Get Guild Prune Count",
                "method": "GET",
                "url": "/guilds/{guild.id}/prune",
                "description": "Requires the KICK_MEMBERS permission.",
                "responseNote": "Returns an object with one 'pruned' key indicating the number of members that would be removed in a prune operation.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "days": {
                        "location": "query",
                        "type": "integer",
                        "description": "number of days to count prune for (1-30)",
                        "default": 7
                    },
                    "include_roles": {
                        "location": "query",
                        "type": "array",
                        "description": "role(s) to include",
                        "default": "none"
                    }
                },
                "parametersArray": false
            },
            "beginGuildPrune": {
                "link": "https://discordapp.com/developers/docs/resources/guild#begin-guild-prune",
                "resource": "guild",
                "name": "Begin Guild Prune",
                "method": "POST",
                "url": "/guilds/{guild.id}/prune",
                "description": "Begin a prune operation. Requires the KICK_MEMBERS permission.  For large guilds it's recommended to set the compute_prune_count option to false, forcing 'pruned' to null. Fires multiple Guild Member Remove Gateway events.",
                "responseNote": "Returns an object with one 'pruned' key indicating the number of members that were removed in the prune operation.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "days": {
                        "location": "json",
                        "type": "integer",
                        "description": "number of days to prune (1-30)",
                        "default": 7
                    },
                    "compute_prune_count": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether 'pruned' is returned, discouraged for large guilds",
                        "default": true
                    },
                    "include_roles": {
                        "location": "json",
                        "type": "array",
                        "description": "role(s) to include",
                        "default": "none"
                    },
                    "reason?": {
                        "location": "json",
                        "type": "string",
                        "description": "reason for the prune",
                        "default": ""
                    }
                },
                "parametersArray": false
            },
            "getGuildVoiceRegions": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-voice-regions",
                "resource": "guild",
                "name": "Get Guild Voice Regions",
                "method": "GET",
                "url": "/guilds/{guild.id}/regions",
                "description": "Unlike the similar /voice route, this returns VIP servers when the guild is VIP-enabled.",
                "responseNote": "Returns a list of voice region objects for the guild.",
                "responseTypes": [
                    {
                        "name": "voice region",
                        "type": "Array<voice/voice-region>"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildInvites": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-invites",
                "resource": "guild",
                "name": "Get Guild Invites",
                "method": "GET",
                "url": "/guilds/{guild.id}/invites",
                "description": "Requires the MANAGE_GUILD permission.",
                "responseNote": "Returns a list of invite objects (with invite metadata) for the guild.",
                "responseTypes": [
                    {
                        "name": "invite",
                        "type": "Array<invite/invite>"
                    },
                    {
                        "name": "invite metadata",
                        "type": "invite/invite-metadata"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildIntegrations": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-integrations",
                "resource": "guild",
                "name": "Get Guild Integrations",
                "method": "GET",
                "url": "/guilds/{guild.id}/integrations",
                "description": "Requires the MANAGE_GUILD permission.",
                "responseNote": "Returns a list of integration objects for the guild.",
                "responseTypes": [
                    {
                        "name": "integration",
                        "type": "Array<guild/integration>"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteGuildIntegration": {
                "link": "https://discordapp.com/developers/docs/resources/guild#delete-guild-integration",
                "resource": "guild",
                "name": "Delete Guild Integration",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/integrations/{integration.id}",
                "description": "Delete the attached integration object for the guild. Deletes any associated webhooks and kicks the associated bot if there is one. Requires the MANAGE_GUILD permission.  Fires a Guild Integrations Update Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "integration.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildWidgetSettings": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-widget-settings",
                "resource": "guild",
                "name": "Get Guild Widget Settings",
                "method": "GET",
                "url": "/guilds/{guild.id}/widget",
                "description": "Requires the MANAGE_GUILD permission.",
                "responseNote": "Returns a guild widget object.",
                "responseTypes": [
                    {
                        "name": "guild widget",
                        "type": "guild/guild-widget"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyGuildWidget": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild-widget",
                "resource": "guild",
                "name": "Modify Guild Widget",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/widget",
                "description": "Modify a guild widget object for the guild. All attributes may be passed in with JSON and modified. Requires the MANAGE_GUILD permission.",
                "responseNote": "Returns the updated guild widget object.",
                "responseTypes": [
                    {
                        "name": "guild widget",
                        "type": "guild/guild-widget"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildWidget": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-widget",
                "resource": "guild",
                "name": "Get Guild Widget",
                "method": "GET",
                "url": "/guilds/{guild.id}/widget.json",
                "description": "",
                "responseNote": "Returns the widget for the guild.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildVanityUrl": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-vanity-url",
                "resource": "guild",
                "name": "Get Guild Vanity URL",
                "method": "GET",
                "url": "/guilds/{guild.id}/vanity-url",
                "description": "Requires the MANAGE_GUILD permission. code will be null if a vanity url for the guild is not set.",
                "responseNote": "Returns a partial invite object for guilds with that feature enabled.",
                "responseTypes": [
                    {
                        "name": "invite",
                        "type": "invite/invite"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildWidgetImage": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-widget-image",
                "resource": "guild",
                "name": "Get Guild Widget Image",
                "method": "GET",
                "url": "/guilds/{guild.id}/widget.png",
                "description": "Requires no permissions or authentication.",
                "responseNote": "Returns a PNG image widget for the guild.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "style": {
                        "location": "query",
                        "type": "string",
                        "description": "style of the widget image returned (see below)",
                        "default": "shield"
                    }
                },
                "parametersArray": false
            },
            "getGuildWelcomeScreen": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-welcome-screen",
                "resource": "guild",
                "name": "Get Guild Welcome Screen",
                "method": "GET",
                "url": "/guilds/{guild.id}/welcome-screen",
                "description": "",
                "responseNote": "Returns the Welcome Screen object for the guild.",
                "responseTypes": [
                    {
                        "name": "Welcome Screen",
                        "type": "guild/welcome-screen"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyGuildWelcomeScreen": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild-welcome-screen",
                "resource": "guild",
                "name": "Modify Guild Welcome Screen",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/welcome-screen",
                "description": "Modify the guild's Welcome Screen. Requires the MANAGE_GUILD permission.",
                "responseNote": "Returns the updated Welcome Screen object.",
                "responseTypes": [
                    {
                        "name": "Welcome Screen",
                        "type": "guild/welcome-screen"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the welcome screen is enabled",
                        "default": false
                    },
                    "welcome_channels": {
                        "location": "json",
                        "type": "array",
                        "description": "channels linked in the welcome screen and their display options"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the server description to show in the welcome screen"
                    }
                },
                "parametersArray": false
            },
            "modifyCurrentUserVoiceState": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-current-user-voice-state",
                "resource": "guild",
                "name": "Modify Current User Voice State",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/voice-states/@me",
                "description": "Updates the current user's voice state.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the channel the user is currently in"
                    },
                    "suppress?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "toggles the user's suppress state",
                        "default": false
                    },
                    "request_to_speak_timestamp?": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "sets the user's request to speak"
                    }
                },
                "parametersArray": false
            },
            "modifyUserVoiceState": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-user-voice-state",
                "resource": "guild",
                "name": "Modify User Voice State",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/voice-states/{user.id}",
                "description": "Updates another user's voice state.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the channel the user is currently in"
                    },
                    "suppress?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "toggles the user's suppress state",
                        "default": false
                    }
                },
                "parametersArray": false
            },
            "updateNick": {
                "category": "guild",
                "url": "/guilds/{guild.id}/members/@me/nick",
                "method": "PATCH",
                "name": "Update Current Users' Nickname",
                "description": "Updates the bots nickname in a server",
                "responseNote": "Returns the nick",
                "responseTypes": [],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri"
                    },
                    "nick": {
                        "type": "string",
                        "description": "Nickname to set",
                        "location": "json"
                    }
                }
            }
        },
        "audit-log": {
            "getGuildAuditLog": {
                "link": "https://discordapp.com/developers/docs/resources/audit-log#get-guild-audit-log",
                "resource": "audit-log",
                "name": "Get Guild Audit Log",
                "method": "GET",
                "url": "/guilds/{guild.id}/audit-logs",
                "description": "Requires the 'VIEW_AUDIT_LOG' permission.",
                "responseNote": "Returns an audit log object for the guild.",
                "responseTypes": [
                    {
                        "name": "audit log",
                        "type": "audit-log/audit-log"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "filter the log for actions made by a user"
                    },
                    "action_type": {
                        "location": "query",
                        "type": "integer",
                        "description": "the type of audit log event"
                    },
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "filter the log before a certain entry id"
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "how many entries are returned (default 50, minimum 1, maximum 100)"
                    }
                },
                "parametersArray": false
            }
        },
        "channel": {
            "getChannel": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-channel",
                "resource": "channel",
                "name": "Get Channel",
                "method": "GET",
                "url": "/channels/{channel.id}",
                "description": "Get a channel by ID.   If the channel is a thread, a thread member object is included in the returned result.",
                "responseNote": "Returns a channel object.",
                "responseTypes": [
                    {
                        "name": "channel",
                        "type": "channel/channel"
                    },
                    {
                        "name": "thread member",
                        "type": "channel/thread-member"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyChannel": {
                "link": "https://discordapp.com/developers/docs/resources/channel#modify-channel",
                "resource": "channel",
                "name": "Modify Channel",
                "method": "PATCH",
                "url": "/channels/{channel.id}",
                "description": "Update a channel's settings.  All JSON parameters are optional.",
                "responseNote": "Returns a channel on success, and a 400 BAD REQUEST on invalid parameters.",
                "responseTypes": [
                    {
                        "name": "channel",
                        "type": "channel/channel"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteOrcloseChannel": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete/close-channel",
                "resource": "channel",
                "name": "Delete/Close Channel",
                "method": "DELETE",
                "url": "/channels/{channel.id}",
                "description": "Delete a channel, or close a private message. Requires the MANAGE_CHANNELS permission for the guild, or MANAGE_THREADS if the channel is a thread. Deleting a category does not delete its child channels; they will have their parent_id removed and a Channel Update Gateway event will fire for each of them.  Fires a Channel Delete Gateway event (or Thread Delete if the channel was a thread).",
                "responseNote": "Returns a channel object on success.",
                "responseTypes": [
                    {
                        "name": "channel",
                        "type": "channel/channel"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getChannelMessages": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-channel-messages",
                "resource": "channel",
                "name": "Get Channel Messages",
                "method": "GET",
                "url": "/channels/{channel.id}/messages",
                "description": "If operating on a guild channel, this endpoint requires the VIEW_CHANNEL permission to be present on the current user. If the current user is missing the 'READ_MESSAGE_HISTORY' permission in the channel then this will return no messages (since they cannot read the message history).",
                "responseNote": "Returns the messages for a channel.",
                "responseTypes": [
                    {
                        "name": "message",
                        "type": "Array<channel/message>"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "around": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get messages around this message ID",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get messages before this message ID",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get messages after this message ID",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of messages to return (1-100)",
                        "default": 50,
                        "extra": {
                            "Required": "false"
                        }
                    }
                },
                "parametersArray": false
            },
            "getChannelMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-channel-message",
                "resource": "channel",
                "name": "Get Channel Message",
                "method": "GET",
                "url": "/channels/{channel.id}/messages/{message.id}",
                "description": "If operating on a guild channel, this endpoint requires the 'READ_MESSAGE_HISTORY' permission to be present on the current user.",
                "responseNote": "Returns a specific message in the channel.",
                "responseTypes": [
                    {
                        "name": "message",
                        "type": "channel/message"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#create-message",
                "resource": "channel",
                "name": "Create Message",
                "method": "POST",
                "url": "/channels/{channel.id}/messages",
                "description": "Post a message to a guild text or DM channel.  Fires a Message Create Gateway event. See message formatting for more information on how to properly format messages.",
                "responseNote": "Returns a message object.",
                "responseTypes": [
                    {
                        "name": "message",
                        "type": "channel/message"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "content": {
                        "location": "json",
                        "type": "string",
                        "description": "the message contents (up to 2000 characters)",
                        "extra": {
                            "Required": "one of content, file, embeds"
                        }
                    },
                    "tts": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if this is a TTS message",
                        "default": false,
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "file": {
                        "location": "json",
                        "type": "file contents",
                        "description": "the contents of the file being sent",
                        "extra": {
                            "Required": "one of content, file, embeds"
                        }
                    },
                    "embeds": {
                        "location": "json",
                        "type": "array",
                        "description": "embedded rich content (up to 6000 characters)",
                        "extra": {
                            "Required": "one of content, file, embeds"
                        }
                    },
                    "embed (deprecated)": {
                        "location": "json",
                        "type": "object",
                        "description": "embedded rich content, deprecated in favor of embeds",
                        "extra": {
                            "Required": "one of content, file, embed"
                        }
                    },
                    "payload_json": {
                        "location": "json",
                        "type": "string",
                        "description": "JSON encoded body of non-file params",
                        "extra": {
                            "Required": "multipart/form-data only"
                        }
                    },
                    "allowed_mentions": {
                        "location": "json",
                        "type": "object",
                        "description": "allowed mentions for the message",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "message_reference": {
                        "location": "json",
                        "type": "message reference",
                        "description": "include to make your message a reply",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "components": {
                        "location": "json",
                        "type": "array",
                        "description": "the components to include with the message",
                        "extra": {
                            "Required": "false"
                        }
                    }
                },
                "parametersArray": false
            },
            "crosspostMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#crosspost-message",
                "resource": "channel",
                "name": "Crosspost Message",
                "method": "POST",
                "url": "/channels/{channel.id}/messages/{message.id}/crosspost",
                "description": "Crosspost a message in a News Channel to following channels. This endpoint requires the 'SEND_MESSAGES' permission, if the current user sent the message, or additionally the 'MANAGE_MESSAGES' permission, for all other messages, to be present for the current user.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createReaction": {
                "link": "https://discordapp.com/developers/docs/resources/channel#create-reaction",
                "resource": "channel",
                "name": "Create Reaction",
                "method": "PUT",
                "url": "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me",
                "description": "Create a reaction for the message. This endpoint requires the 'READ_MESSAGE_HISTORY' permission to be present on the current user. Additionally, if nobody else has reacted to the message using this emoji, this endpoint requires the 'ADD_REACTIONS' permission to be present on the current user. \nThe emoji must be URL Encoded or the request will fail with 10014: Unknown Emoji. To use custom emoji, you must encode it in the format name:id with the emoji name and emoji id.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteOwnReaction": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete-own-reaction",
                "resource": "channel",
                "name": "Delete Own Reaction",
                "method": "DELETE",
                "url": "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me",
                "description": "Delete a reaction the current user has made for the message. \nThe emoji must be URL Encoded or the request will fail with 10014: Unknown Emoji. To use custom emoji, you must encode it in the format name:id with the emoji name and emoji id.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteUserReaction": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete-user-reaction",
                "resource": "channel",
                "name": "Delete User Reaction",
                "method": "DELETE",
                "url": "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}",
                "description": "Deletes another user's reaction. This endpoint requires the 'MANAGE_MESSAGES' permission to be present on the current user. \nThe emoji must be URL Encoded or the request will fail with 10014: Unknown Emoji. To use custom emoji, you must encode it in the format name:id with the emoji name and emoji id.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getReactions": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-reactions",
                "resource": "channel",
                "name": "Get Reactions",
                "method": "GET",
                "url": "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}",
                "description": "Get a list of users that reacted with this emoji. \nThe emoji must be URL Encoded or the request will fail with 10014: Unknown Emoji. To use custom emoji, you must encode it in the format name:id with the emoji name and emoji id.",
                "responseNote": "Returns an array of user objects on success.",
                "responseTypes": [
                    {
                        "name": "user",
                        "type": "Array<user/user>"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get users after this user ID",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of users to return (1-100)",
                        "default": 25,
                        "extra": {
                            "Required": "false"
                        }
                    }
                },
                "parametersArray": false
            },
            "deleteAllReactions": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete-all-reactions",
                "resource": "channel",
                "name": "Delete All Reactions",
                "method": "DELETE",
                "url": "/channels/{channel.id}/messages/{message.id}/reactions",
                "description": "Deletes all reactions on a message. This endpoint requires the 'MANAGE_MESSAGES' permission to be present on the current user. Fires a Message Reaction Remove All Gateway event.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteAllReactionsForEmoji": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete-all-reactions-for-emoji",
                "resource": "channel",
                "name": "Delete All Reactions for Emoji",
                "method": "DELETE",
                "url": "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}",
                "description": "Deletes all the reactions for a given emoji on a message. This endpoint requires the MANAGE_MESSAGES permission to be present on the current user. Fires a Message Reaction Remove Emoji Gateway event.\nThe emoji must be URL Encoded or the request will fail with 10014: Unknown Emoji. To use custom emoji, you must encode it in the format name:id with the emoji name and emoji id.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "editMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#edit-message",
                "resource": "channel",
                "name": "Edit Message",
                "method": "PATCH",
                "url": "/channels/{channel.id}/messages/{message.id}",
                "description": "Edit a previously sent message. The fields content, embeds, and flags can be edited by the original message author. Other users can only edit flags and only if they have the MANAGE_MESSAGES permission in the corresponding channel. When specifying flags, ensure to include all previously set flags/bits in addition to ones that you are modifying. Only flags documented in the table below may be modified by users (unsupported flag changes are currently ignored without error).",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "content": {
                        "location": "json",
                        "type": "string",
                        "description": "the message contents (up to 2000 characters)"
                    },
                    "embeds": {
                        "location": "json",
                        "type": "array",
                        "description": "embedded rich content (up to 6000 characters)"
                    },
                    "embed (deprecated)": {
                        "location": "json",
                        "type": "object",
                        "description": "embedded rich content, deprecated in favor of embeds"
                    },
                    "flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "edit the flags of a message (only SUPPRESS_EMBEDS can currently be set/unset)"
                    },
                    "file": {
                        "location": "json",
                        "type": "file contents",
                        "description": "the contents of the file being sent/edited"
                    },
                    "payload_json": {
                        "location": "json",
                        "type": "string",
                        "description": "JSON encoded body of non-file params (multipart/form-data only)"
                    },
                    "allowed_mentions": {
                        "location": "json",
                        "type": "object",
                        "description": "allowed mentions for the message"
                    },
                    "attachments": {
                        "location": "json",
                        "type": "array",
                        "description": "attached files to keep"
                    },
                    "components": {
                        "location": "json",
                        "type": "array",
                        "description": "the components to include with the message"
                    }
                },
                "parametersArray": false
            },
            "deleteMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete-message",
                "resource": "channel",
                "name": "Delete Message",
                "method": "DELETE",
                "url": "/channels/{channel.id}/messages/{message.id}",
                "description": "Delete a message. If operating on a guild channel and trying to delete a message that was not sent by the current user, this endpoint requires the MANAGE_MESSAGES permission.  Fires a Message Delete Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "bulkDeleteMessages": {
                "link": "https://discordapp.com/developers/docs/resources/channel#bulk-delete-messages",
                "resource": "channel",
                "name": "Bulk Delete Messages",
                "method": "POST",
                "url": "/channels/{channel.id}/messages/bulk-delete",
                "description": "Delete multiple messages in a single request. This endpoint can only be used on guild channels and requires the MANAGE_MESSAGES permission.  Fires a Message Delete Bulk Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "messages": {
                        "location": "json",
                        "type": "array",
                        "description": "an array of message ids to delete (2-100)"
                    }
                },
                "parametersArray": false
            },
            "editChannelPermissions": {
                "link": "https://discordapp.com/developers/docs/resources/channel#edit-channel-permissions",
                "resource": "channel",
                "name": "Edit Channel Permissions",
                "method": "PUT",
                "url": "/channels/{channel.id}/permissions/{overwrite.id}",
                "description": "Edit the channel permission overwrites for a user or role in a channel. Only usable for guild channels. Requires the MANAGE_ROLES permission. Only permissions your bot has in the guild or channel can be allowed/denied (unless your bot has a MANAGE_ROLES overwrite in the channel).  For more information about permissions, see permissions.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "overwrite.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "allow": {
                        "location": "json",
                        "type": "string",
                        "description": "the bitwise value of all allowed permissions"
                    },
                    "deny": {
                        "location": "json",
                        "type": "string",
                        "description": "the bitwise value of all disallowed permissions"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "0 for a role or 1 for a member"
                    }
                },
                "parametersArray": false
            },
            "getChannelInvites": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-channel-invites",
                "resource": "channel",
                "name": "Get Channel Invites",
                "method": "GET",
                "url": "/channels/{channel.id}/invites",
                "description": "Only usable for guild channels. Requires the MANAGE_CHANNELS permission.",
                "responseNote": "Returns a list of invite objects (with invite metadata) for the channel.",
                "responseTypes": [
                    {
                        "name": "invite",
                        "type": "Array<invite/invite>"
                    },
                    {
                        "name": "invite metadata",
                        "type": "invite/invite-metadata"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createChannelInvite": {
                "link": "https://discordapp.com/developers/docs/resources/channel#create-channel-invite",
                "resource": "channel",
                "name": "Create Channel Invite",
                "method": "POST",
                "url": "/channels/{channel.id}/invites",
                "description": "Create a new invite object for the channel. Only usable for guild channels. Requires the CREATE_INSTANT_INVITE permission. All JSON parameters for this route are optional, however the request body is not. If you are not sending any fields, you still have to send an empty JSON object ({}).  Fires an Invite Create Gateway event.",
                "responseNote": "Returns an invite object.",
                "responseTypes": [
                    {
                        "name": "invite",
                        "type": "invite/invite"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "max_age": {
                        "location": "json",
                        "type": "integer",
                        "description": "duration of invite in seconds before expiry, or 0 for never. between 0 and 604800 (7 days)",
                        "default": 86400
                    },
                    "max_uses": {
                        "location": "json",
                        "type": "integer",
                        "description": "max number of uses or 0 for unlimited. between 0 and 100",
                        "default": 0
                    },
                    "temporary": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this invite only grants temporary membership",
                        "default": false
                    },
                    "unique": {
                        "location": "json",
                        "type": "boolean",
                        "description": "if true, don't try to reuse a similar invite (useful for creating many unique one time use invites)",
                        "default": false
                    },
                    "target_type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of target for this voice channel invite"
                    },
                    "target_user_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the user whose stream to display for this invite, required if target_type is 1, the user must be streaming in the channel"
                    },
                    "target_application_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the embedded application to open for this invite, required if target_type is 2, the application must have the EMBEDDED flag"
                    }
                },
                "parametersArray": false
            },
            "deleteChannelPermission": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete-channel-permission",
                "resource": "channel",
                "name": "Delete Channel Permission",
                "method": "DELETE",
                "url": "/channels/{channel.id}/permissions/{overwrite.id}",
                "description": "Delete a channel permission overwrite for a user or role in a channel. Only usable for guild channels. Requires the MANAGE_ROLES permission.  For more information about permissions, see permissions",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "overwrite.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "followNewsChannel": {
                "link": "https://discordapp.com/developers/docs/resources/channel#follow-news-channel",
                "resource": "channel",
                "name": "Follow News Channel",
                "method": "POST",
                "url": "/channels/{channel.id}/followers",
                "description": "Follow a News Channel to send messages to a target channel. Requires the MANAGE_WEBHOOKS permission in the target channel.",
                "responseNote": "Returns a followed channel object.",
                "responseTypes": [
                    {
                        "name": "followed channel",
                        "type": "channel/followed-channel"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of target channel"
                    }
                },
                "parametersArray": false
            },
            "triggerTypingIndicator": {
                "link": "https://discordapp.com/developers/docs/resources/channel#trigger-typing-indicator",
                "resource": "channel",
                "name": "Trigger Typing Indicator",
                "method": "POST",
                "url": "/channels/{channel.id}/typing",
                "description": "Post a typing indicator for the specified channel. Generally bots should not implement this route. However, if a bot is responding to a command and expects the computation to take a few seconds, this endpoint may be called to let the user know that the bot is processing their message.  Fires a Typing Start Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getPinnedMessages": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-pinned-messages",
                "resource": "channel",
                "name": "Get Pinned Messages",
                "method": "GET",
                "url": "/channels/{channel.id}/pins",
                "description": "",
                "responseNote": "Returns all pinned messages in the channel as an array of message objects.",
                "responseTypes": [
                    {
                        "name": "message",
                        "type": "channel/message"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "pinMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#pin-message",
                "resource": "channel",
                "name": "Pin Message",
                "method": "PUT",
                "url": "/channels/{channel.id}/pins/{message.id}",
                "description": "Pin a message in a channel. Requires the MANAGE_MESSAGES permission.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "unpinMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#unpin-message",
                "resource": "channel",
                "name": "Unpin Message",
                "method": "DELETE",
                "url": "/channels/{channel.id}/pins/{message.id}",
                "description": "Unpin a message in a channel. Requires the MANAGE_MESSAGES permission.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "groupDmAddRecipient": {
                "link": "https://discordapp.com/developers/docs/resources/channel#group-dm-add-recipient",
                "resource": "channel",
                "name": "Group DM Add Recipient",
                "method": "PUT",
                "url": "/channels/{channel.id}/recipients/{user.id}",
                "description": "Adds a recipient to a Group DM using their access token.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "access_token": {
                        "location": "json",
                        "type": "string",
                        "description": "access token of a user that has granted your app the gdm.join scope"
                    },
                    "nick": {
                        "location": "json",
                        "type": "string",
                        "description": "nickname of the user being added"
                    }
                },
                "parametersArray": false
            },
            "groupDmRemoveRecipient": {
                "link": "https://discordapp.com/developers/docs/resources/channel#group-dm-remove-recipient",
                "resource": "channel",
                "name": "Group DM Remove Recipient",
                "method": "DELETE",
                "url": "/channels/{channel.id}/recipients/{user.id}",
                "description": "Removes a recipient from a Group DM.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "startThreadWithMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#start-thread-with-message",
                "resource": "channel",
                "name": "Start Thread with Message",
                "method": "POST",
                "url": "/channels/{channel.id}/messages/{message.id}/threads",
                "description": "Creates a new thread from an existing message.  Fires a Thread Create Gateway event.",
                "responseNote": "Returns a channel on success, and a 400 BAD REQUEST on invalid parameters.",
                "responseTypes": [
                    {
                        "name": "channel",
                        "type": "channel/channel"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "2-100 character channel name"
                    },
                    "auto_archive_duration": {
                        "location": "json",
                        "type": "integer",
                        "description": "duration in minutes to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080"
                    }
                },
                "parametersArray": false
            },
            "startThreadWithoutMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#start-thread-without-message",
                "resource": "channel",
                "name": "Start Thread without Message",
                "method": "POST",
                "url": "/channels/{channel.id}/threads",
                "description": "Creates a new thread that is not connected to an existing message. The created thread is always a GUILD_PRIVATE_THREAD.  Fires a Thread Create Gateway event.",
                "responseNote": "Returns a channel on success, and a 400 BAD REQUEST on invalid parameters.",
                "responseTypes": [
                    {
                        "name": "channel",
                        "type": "channel/channel"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "2-100 character channel name"
                    },
                    "auto_archive_duration": {
                        "location": "json",
                        "type": "integer",
                        "description": "duration in minutes to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080"
                    }
                },
                "parametersArray": false
            },
            "joinThread": {
                "link": "https://discordapp.com/developers/docs/resources/channel#join-thread",
                "resource": "channel",
                "name": "Join Thread",
                "method": "PUT",
                "url": "/channels/{channel.id}/thread-members/@me",
                "description": "Adds the current user to a thread. Also requires the thread is not archived.  Fires a Thread Members Update Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "addThreadMember": {
                "link": "https://discordapp.com/developers/docs/resources/channel#add-thread-member",
                "resource": "channel",
                "name": "Add Thread Member",
                "method": "PUT",
                "url": "/channels/{channel.id}/thread-members/{user.id}",
                "description": "Adds another member to a thread. Requires the ability to send messages in the thread. Also requires the thread is not archived.  Fires a Thread Members Update Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "leaveThread": {
                "link": "https://discordapp.com/developers/docs/resources/channel#leave-thread",
                "resource": "channel",
                "name": "Leave Thread",
                "method": "DELETE",
                "url": "/channels/{channel.id}/thread-members/@me",
                "description": "Removes the current user from a thread. Also requires the thread is not archived.  Fires a Thread Members Update Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "removeThreadMember": {
                "link": "https://discordapp.com/developers/docs/resources/channel#remove-thread-member",
                "resource": "channel",
                "name": "Remove Thread Member",
                "method": "DELETE",
                "url": "/channels/{channel.id}/thread-members/{user.id}",
                "description": "Removes another member from a thread. Requires the MANAGE_THREADS permission, or the creator of the thread if it is a GUILD_PRIVATE_THREAD. Also requires the thread is not archived.  Fires a Thread Members Update Gateway event.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "listThreadMembers": {
                "link": "https://discordapp.com/developers/docs/resources/channel#list-thread-members",
                "resource": "channel",
                "name": "List Thread Members",
                "method": "GET",
                "url": "/channels/{channel.id}/thread-members",
                "description": "",
                "responseNote": "Returns array of thread members objects that are members of the thread.",
                "responseTypes": [
                    {
                        "name": "thread members",
                        "type": "channel/thread-member"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "listActiveThreads": {
                "link": "https://discordapp.com/developers/docs/resources/channel#list-active-threads",
                "resource": "channel",
                "name": "List Active Threads",
                "method": "GET",
                "url": "/channels/{channel.id}/threads/active",
                "description": "Threads are ordered by their id, in descending order.",
                "responseNote": "Returns all active threads in the channel, including public and private threads.",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "listPublicArchivedThreads": {
                "link": "https://discordapp.com/developers/docs/resources/channel#list-public-archived-threads",
                "resource": "channel",
                "name": "List Public Archived Threads",
                "method": "GET",
                "url": "/channels/{channel.id}/threads/archived/public",
                "description": "When called on a GUILD_TEXT channel, returns threads of type GUILD_PUBLIC_THREAD. When called on a GUILD_NEWS channel returns threads of type GUILD_NEWS_THREAD. Threads are ordered by archive_timestamp, in descending order. Requires the READ_MESSAGE_HISTORY permission.",
                "responseNote": "Returns archived threads in the channel that are public.",
                "responseTypes": [
                    {
                        "name": "type",
                        "type": "channel/channel-channel-types"
                    },
                    {
                        "name": "type",
                        "type": "channel/channel-channel-types"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "before?": {
                        "location": "query",
                        "type": "ISO8601 timestamp",
                        "description": "returns threads before this timestamp"
                    },
                    "limit?": {
                        "location": "query",
                        "type": "integer",
                        "description": "optional maximum number of threads to return"
                    }
                },
                "parametersArray": false
            },
            "listPrivateArchivedThreads": {
                "link": "https://discordapp.com/developers/docs/resources/channel#list-private-archived-threads",
                "resource": "channel",
                "name": "List Private Archived Threads",
                "method": "GET",
                "url": "/channels/{channel.id}/threads/archived/private",
                "description": "Threads are ordered by archive_timestamp, in descending order. Requires both the READ_MESSAGE_HISTORY and MANAGE_THREADS permissions.",
                "responseNote": "Returns archived threads in the channel that are of type GUILD_PRIVATE_THREAD.",
                "responseTypes": [
                    {
                        "name": "type",
                        "type": "channel/channel-channel-types"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "before?": {
                        "location": "query",
                        "type": "ISO8601 timestamp",
                        "description": "returns threads before this timestamp"
                    },
                    "limit?": {
                        "location": "query",
                        "type": "integer",
                        "description": "optional maximum number of threads to return"
                    }
                },
                "parametersArray": false
            },
            "listJoinedPrivateArchivedThreads": {
                "link": "https://discordapp.com/developers/docs/resources/channel#list-joined-private-archived-threads",
                "resource": "channel",
                "name": "List Joined Private Archived Threads",
                "method": "GET",
                "url": "/channels/{channel.id}/users/@me/threads/archived/private",
                "description": "Threads are ordered by their id, in descending order. Requires the READ_MESSAGE_HISTORY permission.",
                "responseNote": "Returns archived threads in the channel that are of type GUILD_PRIVATE_THREAD, and the user has joined.",
                "responseTypes": [
                    {
                        "name": "type",
                        "type": "channel/channel-channel-types"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "before?": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "returns threads before this id"
                    },
                    "limit?": {
                        "location": "query",
                        "type": "integer",
                        "description": "optional maximum number of threads to return"
                    }
                },
                "parametersArray": false
            }
        },
        "emoji": {
            "listGuildEmojis": {
                "link": "https://discordapp.com/developers/docs/resources/emoji#list-guild-emojis",
                "resource": "emoji",
                "name": "List Guild Emojis",
                "method": "GET",
                "url": "/guilds/{guild.id}/emojis",
                "description": "",
                "responseNote": "Returns a list of emoji objects for the given guild.",
                "responseTypes": [
                    {
                        "name": "emoji",
                        "type": "Array<emoji/emoji>"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildEmoji": {
                "link": "https://discordapp.com/developers/docs/resources/emoji#get-guild-emoji",
                "resource": "emoji",
                "name": "Get Guild Emoji",
                "method": "GET",
                "url": "/guilds/{guild.id}/emojis/{emoji.id}",
                "description": "",
                "responseNote": "Returns an emoji object for the given guild and emoji IDs.",
                "responseTypes": [
                    {
                        "name": "emoji",
                        "type": "emoji/emoji"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createGuildEmoji": {
                "link": "https://discordapp.com/developers/docs/resources/emoji#create-guild-emoji",
                "resource": "emoji",
                "name": "Create Guild Emoji",
                "method": "POST",
                "url": "/guilds/{guild.id}/emojis",
                "description": "Create a new emoji for the guild. Requires the MANAGE_EMOJIS permission.  Fires a Guild Emojis Update Gateway event.",
                "responseNote": "Returns the new emoji object on success.",
                "responseTypes": [
                    {
                        "name": "emoji",
                        "type": "emoji/emoji"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the emoji"
                    },
                    "image": {
                        "location": "json",
                        "type": "image data",
                        "description": "the 128x128 emoji image"
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "roles allowed to use this emoji"
                    }
                },
                "parametersArray": false
            },
            "modifyGuildEmoji": {
                "link": "https://discordapp.com/developers/docs/resources/emoji#modify-guild-emoji",
                "resource": "emoji",
                "name": "Modify Guild Emoji",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/emojis/{emoji.id}",
                "description": "Modify the given emoji. Requires the MANAGE_EMOJIS permission.  Fires a Guild Emojis Update Gateway event.",
                "responseNote": "Returns the updated emoji object on success.",
                "responseTypes": [
                    {
                        "name": "emoji",
                        "type": "emoji/emoji"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the emoji"
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "nullable": true,
                        "description": "roles allowed to use this emoji"
                    }
                },
                "parametersArray": false
            },
            "deleteGuildEmoji": {
                "link": "https://discordapp.com/developers/docs/resources/emoji#delete-guild-emoji",
                "resource": "emoji",
                "name": "Delete Guild Emoji",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/emojis/{emoji.id}",
                "description": "Delete the given emoji. Requires the MANAGE_EMOJIS permission.  Fires a Guild Emojis Update Gateway event.",
                "responseNote": "Returns 204 No Content on success.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            }
        },
        "invite": {
            "getInvite": {
                "link": "https://discordapp.com/developers/docs/resources/invite#get-invite",
                "resource": "invite",
                "name": "Get Invite",
                "method": "GET",
                "url": "/invites/{invite.code}",
                "description": "",
                "responseNote": "Returns an invite object for the given code.",
                "responseTypes": [
                    {
                        "name": "invite",
                        "type": "invite/invite"
                    }
                ],
                "parameters": {
                    "invite.code": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "with_counts?": {
                        "location": "query",
                        "type": "boolean",
                        "description": "whether the invite should contain approximate member counts",
                        "default": false
                    },
                    "with_expiration?": {
                        "location": "query",
                        "type": "boolean",
                        "description": "whether the invite should contain the expiration date",
                        "default": false
                    }
                },
                "parametersArray": false
            },
            "deleteInvite": {
                "link": "https://discordapp.com/developers/docs/resources/invite#delete-invite",
                "resource": "invite",
                "name": "Delete Invite",
                "method": "DELETE",
                "url": "/invites/{invite.code}",
                "description": "Delete an invite. Requires the MANAGE_CHANNELS permission on the channel this invite belongs to, or MANAGE_GUILD to remove any invite across the guild.  Fires a Invite Delete Gateway event.",
                "responseNote": "Returns an invite object on success.",
                "responseTypes": [
                    {
                        "name": "invite",
                        "type": "invite/invite"
                    }
                ],
                "parameters": {
                    "invite.code": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            }
        },
        "user": {
            "getCurrentUser": {
                "link": "https://discordapp.com/developers/docs/resources/user#get-current-user",
                "resource": "user",
                "name": "Get Current User",
                "method": "GET",
                "url": "/users/@me",
                "description": "For OAuth2, this requires the identify scope, which will return the object without an email, and optionally the email scope, which returns the object with an email.",
                "responseNote": "Returns the user object of the requester's account.",
                "responseTypes": [
                    {
                        "name": "user",
                        "type": "user/user"
                    }
                ],
                "parameters": {},
                "parametersArray": false
            },
            "getUser": {
                "link": "https://discordapp.com/developers/docs/resources/user#get-user",
                "resource": "user",
                "name": "Get User",
                "method": "GET",
                "url": "/users/{user.id}",
                "description": "",
                "responseNote": "Returns a user object for a given user ID.",
                "responseTypes": [
                    {
                        "name": "user",
                        "type": "user/user"
                    }
                ],
                "parameters": {
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyCurrentUser": {
                "link": "https://discordapp.com/developers/docs/resources/user#modify-current-user",
                "resource": "user",
                "name": "Modify Current User",
                "method": "PATCH",
                "url": "/users/@me",
                "description": "Modify the requester's user account settings.",
                "responseNote": "Returns a user object on success.",
                "responseTypes": [
                    {
                        "name": "user",
                        "type": "user/user"
                    }
                ],
                "parameters": {
                    "username": {
                        "location": "json",
                        "type": "string",
                        "description": "user's username, if changed may cause the user's discriminator to be randomized."
                    },
                    "avatar": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "if passed, modifies the user's avatar"
                    }
                },
                "parametersArray": false
            },
            "getCurrentUserGuilds": {
                "link": "https://discordapp.com/developers/docs/resources/user#get-current-user-guilds",
                "resource": "user",
                "name": "Get Current User Guilds",
                "method": "GET",
                "url": "/users/@me/guilds",
                "description": "Requires the guilds OAuth2 scope.",
                "responseNote": "Returns a list of partial guild objects the current user is a member of.",
                "responseTypes": [
                    {
                        "name": "guild",
                        "type": "Array<guild/guild>"
                    }
                ],
                "parameters": {
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get guilds before this guild ID",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get guilds after this guild ID",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of guilds to return (1-200)",
                        "default": 200,
                        "extra": {
                            "Required": "false"
                        }
                    }
                },
                "parametersArray": false
            },
            "leaveGuild": {
                "link": "https://discordapp.com/developers/docs/resources/user#leave-guild",
                "resource": "user",
                "name": "Leave Guild",
                "method": "DELETE",
                "url": "/users/@me/guilds/{guild.id}",
                "description": "Leave a guild.",
                "responseNote": "Returns a 204 empty response on success.",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createDm": {
                "link": "https://discordapp.com/developers/docs/resources/user#create-dm",
                "resource": "user",
                "name": "Create DM",
                "method": "POST",
                "url": "/users/@me/channels",
                "description": "Create a new DM channel with a user.",
                "responseNote": "Returns a DM channel object.",
                "responseTypes": [
                    {
                        "name": "DM channel",
                        "type": "channel/channel"
                    }
                ],
                "parameters": {
                    "recipient_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the recipient to open a DM channel with"
                    }
                },
                "parametersArray": false
            },
            "createGroupDm": {
                "link": "https://discordapp.com/developers/docs/resources/user#create-group-dm",
                "resource": "user",
                "name": "Create Group DM",
                "method": "POST",
                "url": "/users/@me/channels",
                "description": "Create a new group DM channel with multiple users.  This endpoint was intended to be used with the now-deprecated GameBridge SDK. DMs created with this endpoint will not be shown in the Discord client",
                "responseNote": "Returns a DM channel object.",
                "responseTypes": [
                    {
                        "name": "DM channel",
                        "type": "channel/channel"
                    }
                ],
                "parameters": {
                    "access_tokens": {
                        "location": "json",
                        "type": "array",
                        "description": "access tokens of users that have granted your app the gdm.join scope"
                    },
                    "nicks": {
                        "location": "json",
                        "type": "dict",
                        "description": "a dictionary of user ids to their respective nicknames"
                    }
                },
                "parametersArray": false
            },
            "getUserConnections": {
                "link": "https://discordapp.com/developers/docs/resources/user#get-user-connections",
                "resource": "user",
                "name": "Get User Connections",
                "method": "GET",
                "url": "/users/@me/connections",
                "description": "Requires the connections OAuth2 scope.",
                "responseNote": "Returns a list of connection objects.",
                "responseTypes": [
                    {
                        "name": "connection",
                        "type": "Array<user/connection>"
                    }
                ],
                "parameters": {},
                "parametersArray": false
            }
        },
        "voice": {
            "listVoiceRegions": {
                "link": "https://discordapp.com/developers/docs/resources/voice#list-voice-regions",
                "resource": "voice",
                "name": "List Voice Regions",
                "method": "GET",
                "url": "/voice/regions",
                "description": "",
                "responseNote": "Returns an array of voice region objects that can be used when creating servers.",
                "responseTypes": [
                    {
                        "name": "voice region",
                        "type": "Array<voice/voice-region>"
                    }
                ],
                "parameters": {},
                "parametersArray": false
            }
        },
        "webhook": {
            "createWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#create-webhook",
                "resource": "webhook",
                "name": "Create Webhook",
                "method": "POST",
                "url": "/channels/{channel.id}/webhooks",
                "description": "Create a new webhook. Requires the MANAGE_WEBHOOKS permission.  Webhook names follow our naming restrictions that can be found in our Usernames and Nicknames documentation, with the following additional stipulations:",
                "responseNote": "Returns a webhook object on success.",
                "responseTypes": [
                    {
                        "name": "webhook",
                        "type": "webhook/webhook"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the webhook (1-80 characters)"
                    },
                    "avatar?": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "image for the default webhook avatar"
                    }
                },
                "parametersArray": false
            },
            "getChannelWebhooks": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#get-channel-webhooks",
                "resource": "webhook",
                "name": "Get Channel Webhooks",
                "method": "GET",
                "url": "/channels/{channel.id}/webhooks",
                "description": "Requires the MANAGE_WEBHOOKS permission.",
                "responseNote": "Returns a list of channel webhook objects.",
                "responseTypes": [
                    {
                        "name": "webhook",
                        "type": "Array<webhook/webhook>"
                    }
                ],
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildWebhooks": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#get-guild-webhooks",
                "resource": "webhook",
                "name": "Get Guild Webhooks",
                "method": "GET",
                "url": "/guilds/{guild.id}/webhooks",
                "description": "Requires the MANAGE_WEBHOOKS permission.",
                "responseNote": "Returns a list of guild webhook objects.",
                "responseTypes": [
                    {
                        "name": "webhook",
                        "type": "Array<webhook/webhook>"
                    }
                ],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#get-webhook",
                "resource": "webhook",
                "name": "Get Webhook",
                "method": "GET",
                "url": "/webhooks/{webhook.id}",
                "description": "",
                "responseNote": "Returns the new webhook object for the given id.",
                "responseTypes": [
                    {
                        "name": "webhook",
                        "type": "webhook/webhook"
                    }
                ],
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getWebhookWithToken": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#get-webhook-with-token",
                "resource": "webhook",
                "name": "Get Webhook with Token",
                "method": "GET",
                "url": "/webhooks/{webhook.id}/{webhook.token}",
                "description": "Same as above, except this call does not require authentication and returns no user in the webhook object.",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#modify-webhook",
                "resource": "webhook",
                "name": "Modify Webhook",
                "method": "PATCH",
                "url": "/webhooks/{webhook.id}",
                "description": "Modify a webhook. Requires the MANAGE_WEBHOOKS permission.",
                "responseNote": "Returns the updated webhook object on success.",
                "responseTypes": [
                    {
                        "name": "webhook",
                        "type": "webhook/webhook"
                    }
                ],
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the default name of the webhook"
                    },
                    "avatar": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "image for the default webhook avatar"
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the new channel id this webhook should be moved to"
                    }
                },
                "parametersArray": false
            },
            "modifyWebhookWithToken": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#modify-webhook-with-token",
                "resource": "webhook",
                "name": "Modify Webhook with Token",
                "method": "PATCH",
                "url": "/webhooks/{webhook.id}/{webhook.token}",
                "description": "Same as above, except this call does not require authentication, does not accept a channel_id parameter in the body, and does not return a user in the webhook object.",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#delete-webhook",
                "resource": "webhook",
                "name": "Delete Webhook",
                "method": "DELETE",
                "url": "/webhooks/{webhook.id}",
                "description": "Delete a webhook permanently. Requires the MANAGE_WEBHOOKS permission.",
                "responseNote": "Returns a 204 NO CONTENT response on success.",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteWebhookWithToken": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#delete-webhook-with-token",
                "resource": "webhook",
                "name": "Delete Webhook with Token",
                "method": "DELETE",
                "url": "/webhooks/{webhook.id}/{webhook.token}",
                "description": "Same as above, except this call does not require authentication.",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "executeWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#execute-webhook",
                "resource": "webhook",
                "name": "Execute Webhook",
                "method": "POST",
                "url": "/webhooks/{webhook.id}/{webhook.token}",
                "description": "least one of",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "wait": {
                        "location": "query",
                        "type": "boolean",
                        "description": "waits for server confirmation of message send before response, and returns the created message body (defaults to false; when false a message that is not saved does not return an error)",
                        "default": false,
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "thread_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "Send a message to the specified thread within a webhook's channel. The thread will automatically be unarchived.",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "content": {
                        "location": "json",
                        "type": "string",
                        "description": "the message contents (up to 2000 characters)",
                        "extra": {
                            "Required": "one of content, file, embeds"
                        }
                    },
                    "username": {
                        "location": "json",
                        "type": "string",
                        "description": "override the default username of the webhook",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "avatar_url": {
                        "location": "json",
                        "type": "string",
                        "description": "override the default avatar of the webhook",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "tts": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if this is a TTS message",
                        "default": false,
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "file": {
                        "location": "json",
                        "type": "file contents",
                        "description": "the contents of the file being sent",
                        "extra": {
                            "Required": "one of content, file, embeds"
                        }
                    },
                    "embeds": {
                        "location": "json",
                        "type": "array",
                        "description": "embedded rich content",
                        "extra": {
                            "Required": "one of content, file, embeds"
                        }
                    },
                    "payload_json": {
                        "location": "json",
                        "type": "string",
                        "description": "JSON encoded body of non-file params",
                        "extra": {
                            "Required": "multipart/form-data only"
                        }
                    },
                    "allowed_mentions": {
                        "location": "json",
                        "type": "object",
                        "description": "allowed mentions for the message",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "components": {
                        "location": "json",
                        "type": "array",
                        "description": "the components to include with the message",
                        "extra": {
                            "Required": "false"
                        }
                    }
                },
                "parametersArray": false
            },
            "executeSlackCompatibleWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#execute-slack-compatible-webhook",
                "resource": "webhook",
                "name": "Execute Slack-Compatible Webhook",
                "method": "POST",
                "url": "/webhooks/{webhook.id}/{webhook.token}/slack",
                "description": "Refer to Slack's documentation for more information. We do not support Slack's channel, icon_emoji, mrkdwn, or mrkdwn_in properties.",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "wait": {
                        "location": "query",
                        "type": "boolean",
                        "description": "waits for server confirmation of message send before response (defaults to true; when false a message that is not saved does not return an error)",
                        "default": false,
                        "extra": {
                            "Required": "false"
                        }
                    }
                },
                "parametersArray": false
            },
            "executeGithubCompatibleWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#execute-github-compatible-webhook",
                "resource": "webhook",
                "name": "Execute GitHub-Compatible Webhook",
                "method": "POST",
                "url": "/webhooks/{webhook.id}/{webhook.token}/github",
                "description": "Add a new webhook to your GitHub repo (in the repo's settings), and use this endpoint as the \"Payload URL.\" You can choose what events your Discord channel receives by choosing the \"Let me select individual events\" option and selecting individual events for the new webhook you're configuring.",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "wait": {
                        "location": "query",
                        "type": "boolean",
                        "description": "waits for server confirmation of message send before response (defaults to true; when false a message that is not saved does not return an error)",
                        "default": false,
                        "extra": {
                            "Required": "false"
                        }
                    }
                },
                "parametersArray": false
            },
            "getWebhookMessage": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#get-webhook-message",
                "resource": "webhook",
                "name": "Get Webhook Message",
                "method": "GET",
                "url": "/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}",
                "description": "",
                "responseNote": "Returns a previously-sent webhook message from the same token.",
                "responseTypes": [
                    {
                        "name": "message",
                        "type": "channel/message"
                    }
                ],
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "editWebhookMessage": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#edit-webhook-message",
                "resource": "webhook",
                "name": "Edit Webhook Message",
                "method": "PATCH",
                "url": "/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}",
                "description": "Edits a previously-sent webhook message from the same token.",
                "responseNote": "Returns a message object on success.",
                "responseTypes": [
                    {
                        "name": "message",
                        "type": "channel/message"
                    }
                ],
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "content": {
                        "location": "json",
                        "type": "string",
                        "description": "the message contents (up to 2000 characters)"
                    },
                    "embeds": {
                        "location": "json",
                        "type": "array",
                        "description": "embedded rich content"
                    },
                    "file": {
                        "location": "json",
                        "type": "file contents",
                        "description": "the contents of the file being sent/edited"
                    },
                    "payload_json": {
                        "location": "json",
                        "type": "string",
                        "description": "JSON encoded body of non-file params (multipart/form-data only)"
                    },
                    "allowed_mentions": {
                        "location": "json",
                        "type": "object",
                        "description": "allowed mentions for the message"
                    },
                    "attachments": {
                        "location": "json",
                        "type": "array",
                        "description": "attached files to keep"
                    },
                    "components": {
                        "location": "json",
                        "type": "array",
                        "description": "the components to include with the message"
                    }
                },
                "parametersArray": false
            },
            "deleteWebhookMessage": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#delete-webhook-message",
                "resource": "webhook",
                "name": "Delete Webhook Message",
                "method": "DELETE",
                "url": "/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}",
                "description": "Deletes a message that was created by the webhook.",
                "responseNote": "Returns a 204 NO CONTENT response on success.",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            }
        },
        "gateway": {
            "getGateway": {
                "link": "https://discordapp.com/developers/docs/topics/gateway#get-gateway",
                "resource": "gateway",
                "name": "Get Gateway",
                "method": "GET",
                "url": "/gateway",
                "description": "Clients should cache this value and only call this endpoint to retrieve a new URL if they are unable to properly establish a connection using the cached version of the URL.",
                "responseNote": "Returns an object with a single valid WSS URL, which the client can use for Connecting.",
                "parameters": {},
                "parametersArray": false
            },
            "getGatewayBot": {
                "link": "https://discordapp.com/developers/docs/topics/gateway#get-gateway-bot",
                "resource": "gateway",
                "name": "Get Gateway Bot",
                "method": "GET",
                "url": "/gateway/bot",
                "description": "Unlike the Get Gateway, this route should not be cached for extended periods of time as the value is not guaranteed to be the same per-call, and changes as the bot joins/leaves guilds.",
                "responseNote": "Returns an object based on the information in Get Gateway, plus additional metadata that can help during the operation of large or sharded bots.",
                "parameters": {
                    "total": {
                        "location": "json",
                        "type": "integer",
                        "description": "The total number of session starts the current user is allowed"
                    },
                    "remaining": {
                        "location": "json",
                        "type": "integer",
                        "description": "The remaining number of session starts the current user is allowed"
                    },
                    "reset_after": {
                        "location": "json",
                        "type": "integer",
                        "description": "The number of milliseconds after which the limit resets"
                    },
                    "max_concurrency": {
                        "location": "json",
                        "type": "integer",
                        "description": "The number of identify requests allowed per 5 seconds"
                    }
                },
                "parametersArray": false
            }
        },
        "oauth2": {
            "getCurrentBotApplicationInformation": {
                "link": "https://discordapp.com/developers/docs/topics/oauth2#get-current-bot-application-information",
                "resource": "oauth2",
                "name": "Get Current Bot Application Information",
                "method": "GET",
                "url": "/oauth2/applications/@me",
                "description": "",
                "responseNote": "Returns the bot's application object without flags.",
                "responseTypes": [
                    {
                        "name": "application",
                        "type": "application/application"
                    }
                ],
                "parameters": {},
                "parametersArray": false
            },
            "getCurrentAuthorizationInformation": {
                "link": "https://discordapp.com/developers/docs/topics/oauth2#get-current-authorization-information",
                "resource": "oauth2",
                "name": "Get Current Authorization Information",
                "method": "GET",
                "url": "/oauth2/@me",
                "description": "Requires authentication with a bearer token.",
                "responseNote": "Returns info about the current authorization.",
                "parameters": {
                    "application": {
                        "location": "json",
                        "type": "object",
                        "description": "the current application"
                    },
                    "scopes": {
                        "location": "json",
                        "type": "array",
                        "description": "the scopes the user has authorized the application for"
                    },
                    "expires": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when the access token expires"
                    },
                    "user?": {
                        "location": "json",
                        "type": "object",
                        "description": "the user who has authorized, if the user has authorized with the identify scope"
                    }
                },
                "parametersArray": false
            }
        },
        "permissions": {}
    },
    "models": {
        "guild": {
            "guild": {
                "link": "https://discordapp.com/developers/docs/resources/guild#guild-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "guild id"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "guild name (2-100 characters, excluding trailing and leading whitespace)"
                    },
                    "icon": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "icon hash"
                    },
                    "icon_hash?": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "icon hash, returned when in the template object"
                    },
                    "splash": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "splash hash"
                    },
                    "discovery_splash": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "discovery splash hash; only present for guilds with the \"DISCOVERABLE\" feature"
                    },
                    "owner? *": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if the user is the owner of the guild",
                        "default": false
                    },
                    "owner_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of owner"
                    },
                    "permissions? *": {
                        "location": "json",
                        "type": "string",
                        "description": "total permissions for the user in the guild (excludes overwrites)"
                    },
                    "region? **": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "voice region id for the guild (deprecated)"
                    },
                    "afk_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "id of afk channel"
                    },
                    "afk_timeout": {
                        "location": "json",
                        "type": "integer",
                        "description": "afk timeout in seconds"
                    },
                    "widget_enabled?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if the server widget is enabled",
                        "default": false
                    },
                    "widget_channel_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the channel id that the widget will generate an invite to, or null if set to no invite"
                    },
                    "verification_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "verification level required for the guild"
                    },
                    "default_message_notifications": {
                        "location": "json",
                        "type": "integer",
                        "description": "default message notifications level"
                    },
                    "explicit_content_filter": {
                        "location": "json",
                        "type": "integer",
                        "description": "explicit content filter level"
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "roles in the guild"
                    },
                    "emojis": {
                        "location": "json",
                        "type": "array",
                        "description": "custom guild emojis"
                    },
                    "features": {
                        "location": "json",
                        "type": "array",
                        "description": "enabled guild features"
                    },
                    "mfa_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "required MFA level for the guild"
                    },
                    "application_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "application id of the guild creator if it is bot-created"
                    },
                    "system_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where guild notices such as welcome messages and boost events are posted"
                    },
                    "system_channel_flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "system channel flags"
                    },
                    "rules_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where Community guilds can display rules and/or guidelines"
                    },
                    "joined_at?": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when this guild was joined at"
                    },
                    "large?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if this is considered a large guild",
                        "default": false
                    },
                    "unavailable?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if this guild is unavailable due to an outage",
                        "default": false
                    },
                    "member_count?": {
                        "location": "json",
                        "type": "integer",
                        "description": "total number of members in this guild"
                    },
                    "voice_states?": {
                        "location": "json",
                        "type": "array",
                        "description": "states of members currently in voice channels; lacks the guild_id key"
                    },
                    "members?": {
                        "location": "json",
                        "type": "array",
                        "description": "users in the guild"
                    },
                    "channels?": {
                        "location": "json",
                        "type": "array",
                        "description": "channels in the guild"
                    },
                    "threads?": {
                        "location": "json",
                        "type": "array",
                        "description": "all active threads in the guild that current user has permission to view"
                    },
                    "presences?": {
                        "location": "json",
                        "type": "array",
                        "description": "presences of the members in the guild, will only include non-offline members if the size is greater than large threshold"
                    },
                    "max_presences?": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "the maximum number of presences for the guild (the default value, currently 25000, is in effect when null is returned)"
                    },
                    "max_members?": {
                        "location": "json",
                        "type": "integer",
                        "description": "the maximum number of members for the guild"
                    },
                    "vanity_url_code": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the vanity url code for the guild"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the description of a Community guild"
                    },
                    "banner": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "banner hash"
                    },
                    "premium_tier": {
                        "location": "json",
                        "type": "integer",
                        "description": "premium tier (Server Boost level)"
                    },
                    "premium_subscription_count?": {
                        "location": "json",
                        "type": "integer",
                        "description": "the number of boosts this guild currently has"
                    },
                    "preferred_locale": {
                        "location": "json",
                        "type": "string",
                        "description": "the preferred locale of a Community guild; used in server discovery and notices from Discord; defaults to \"en-US\""
                    },
                    "public_updates_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where admins and moderators of Community guilds receive notices from Discord"
                    },
                    "max_video_channel_users?": {
                        "location": "json",
                        "type": "integer",
                        "description": "the maximum amount of users in a video channel"
                    },
                    "approximate_member_count?": {
                        "location": "json",
                        "type": "integer",
                        "description": "approximate number of members in this guild, returned from the GET /guilds/<id> endpoint when with_counts is true"
                    },
                    "approximate_presence_count?": {
                        "location": "json",
                        "type": "integer",
                        "description": "approximate number of non-offline members in this guild, returned from the GET /guilds/<id> endpoint when with_counts is true"
                    },
                    "welcome_screen?": {
                        "location": "json",
                        "type": "object",
                        "description": "the welcome screen of a Community guild, shown to new members, returned in an Invite's guild object"
                    },
                    "nsfw_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "guild NSFW level"
                    },
                    "stage_instances?": {
                        "location": "json",
                        "type": "array",
                        "description": "Stage instances in the guild"
                    }
                }
            },
            "unavailableGuild": {
                "link": "https://discordapp.com/developers/docs/resources/guild#unavailable-guild-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {}
            },
            "guildPreview": {
                "link": "https://discordapp.com/developers/docs/resources/guild#guild-preview-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "guild id"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "guild name (2-100 characters)"
                    },
                    "icon": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "icon hash"
                    },
                    "splash": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "splash hash"
                    },
                    "discovery_splash": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "discovery splash hash"
                    },
                    "emojis": {
                        "location": "json",
                        "type": "array",
                        "description": "custom guild emojis"
                    },
                    "features": {
                        "location": "json",
                        "type": "array",
                        "description": "enabled guild features"
                    },
                    "approximate_member_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "approximate number of members in this guild"
                    },
                    "approximate_presence_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "approximate number of online members in this guild"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the description for the guild, if the guild is discoverable"
                    }
                }
            },
            "guildWidget": {
                "link": "https://discordapp.com/developers/docs/resources/guild#guild-widget-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the widget is enabled",
                        "default": false
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the widget channel id"
                    }
                }
            },
            "guildMember": {
                "link": "https://discordapp.com/developers/docs/resources/guild#guild-member-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "user?": {
                        "location": "json",
                        "type": "object",
                        "description": "the user this guild member represents"
                    },
                    "nick?": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "this users guild nickname"
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "array of role object ids"
                    },
                    "joined_at": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when the user joined the guild"
                    },
                    "premium_since?": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "when the user started boosting the guild"
                    },
                    "deaf": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is deafened in voice channels",
                        "default": false
                    },
                    "mute": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is muted in voice channels",
                        "default": false
                    },
                    "pending?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user has not yet passed the guild's Membership Screening requirements",
                        "default": false
                    },
                    "permissions?": {
                        "location": "json",
                        "type": "string",
                        "description": "total permissions of the member in the channel, including overwrites, returned when in the interaction object"
                    }
                }
            },
            "integration": {
                "link": "https://discordapp.com/developers/docs/resources/guild#integration-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "integration id"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "integration name"
                    },
                    "type": {
                        "location": "json",
                        "type": "string",
                        "description": "integration type (twitch, youtube, or discord)"
                    },
                    "enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "is this integration enabled",
                        "default": false
                    },
                    "syncing?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "is this integration syncing",
                        "default": false
                    },
                    "role_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id that this integration uses for \"subscribers\""
                    },
                    "enable_emoticons?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether emoticons should be synced for this integration (twitch only currently)",
                        "default": false
                    },
                    "expire_behavior?": {
                        "location": "json",
                        "type": "integration expire behavior",
                        "description": "the behavior of expiring subscribers"
                    },
                    "expire_grace_period?": {
                        "location": "json",
                        "type": "integer",
                        "description": "the grace period (in days) before expiring subscribers"
                    },
                    "user?": {
                        "location": "json",
                        "type": "object",
                        "description": "user for this integration"
                    },
                    "account": {
                        "location": "json",
                        "type": "object",
                        "description": "integration account information"
                    },
                    "synced_at?": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when this integration was last synced"
                    },
                    "subscriber_count?": {
                        "location": "json",
                        "type": "integer",
                        "description": "how many subscribers this integration has"
                    },
                    "revoked?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "has this integration been revoked",
                        "default": false
                    },
                    "application?": {
                        "location": "json",
                        "type": "object",
                        "description": "The bot/OAuth2 application for discord integrations"
                    }
                }
            },
            "integrationAccount": {
                "link": "https://discordapp.com/developers/docs/resources/guild#integration-account-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "string",
                        "description": "id of the account"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the account"
                    }
                }
            },
            "integrationApplication": {
                "link": "https://discordapp.com/developers/docs/resources/guild#integration-application-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the app"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the name of the app"
                    },
                    "icon": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the icon hash of the app"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the description of the app"
                    },
                    "summary": {
                        "location": "json",
                        "type": "string",
                        "description": "the description of the app"
                    },
                    "bot?": {
                        "location": "json",
                        "type": "object",
                        "description": "the bot associated with this application"
                    }
                }
            },
            "ban": {
                "link": "https://discordapp.com/developers/docs/resources/guild#ban-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "reason": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the reason for the ban"
                    },
                    "user": {
                        "location": "json",
                        "type": "object",
                        "description": "the banned user"
                    }
                }
            },
            "welcomeScreen": {
                "link": "https://discordapp.com/developers/docs/resources/guild#welcome-screen-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the description shown for the channel"
                    },
                    "welcome_channels": {
                        "location": "json",
                        "type": "array",
                        "description": "the channels shown in the welcome screen, up to 5"
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the channel's id"
                    },
                    "emoji_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the emoji id, if the emoji is custom"
                    },
                    "emoji_name": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the emoji name if custom, the unicode character if standard, or null if no emoji is set"
                    }
                }
            },
            "membershipScreening": {
                "link": "https://discordapp.com/developers/docs/resources/guild#membership-screening-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the role"
                    },
                    "region?": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "voice region id (deprecated)"
                    },
                    "icon?": {
                        "location": "json",
                        "type": "image data",
                        "description": "base64 128x128 image for the guild icon"
                    },
                    "verification_level?": {
                        "location": "json",
                        "type": "integer",
                        "description": "verification level"
                    },
                    "default_message_notifications?": {
                        "location": "json",
                        "type": "integer",
                        "description": "default message notification level"
                    },
                    "explicit_content_filter?": {
                        "location": "json",
                        "type": "integer",
                        "description": "explicit content filter level"
                    },
                    "roles?": {
                        "location": "json",
                        "type": "array",
                        "description": "new guild roles"
                    },
                    "channels?": {
                        "location": "json",
                        "type": "array",
                        "description": "new guild's channels"
                    },
                    "afk_channel_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id for afk channel"
                    },
                    "afk_timeout?": {
                        "location": "json",
                        "type": "integer",
                        "description": "afk timeout in seconds"
                    },
                    "system_channel_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the channel where guild notices such as welcome messages and boost events are posted"
                    },
                    "system_channel_flags?": {
                        "location": "json",
                        "type": "integer",
                        "description": "system channel flags"
                    },
                    "with_counts?": {
                        "location": "query",
                        "type": "boolean",
                        "description": "when true, will return approximate member and presence counts for the guild",
                        "default": false,
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "region": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "guild voice region id (deprecated)"
                    },
                    "verification_level": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "verification level"
                    },
                    "default_message_notifications": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "default message notification level"
                    },
                    "explicit_content_filter": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "explicit content filter level"
                    },
                    "afk_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "id for afk channel"
                    },
                    "afk_timeout": {
                        "location": "json",
                        "type": "integer",
                        "description": "afk timeout in seconds"
                    },
                    "icon": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 1024x1024 png/jpeg/gif image for the guild icon (can be animated gif when the server has the ANIMATED_ICON feature)"
                    },
                    "owner_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "user id to transfer guild ownership to (must be owner)"
                    },
                    "splash": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 16:9 png/jpeg image for the guild splash (when the server has the INVITE_SPLASH feature)"
                    },
                    "discovery_splash": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 16:9 png/jpeg image for the guild discovery splash (when the server has the DISCOVERABLE feature)"
                    },
                    "banner": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 16:9 png/jpeg image for the guild banner (when the server has the BANNER feature)"
                    },
                    "system_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where guild notices such as welcome messages and boost events are posted"
                    },
                    "system_channel_flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "system channel flags"
                    },
                    "rules_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where Community guilds display rules and/or guidelines"
                    },
                    "public_updates_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where admins and moderators of Community guilds receive notices from Discord"
                    },
                    "preferred_locale": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the preferred locale of a Community guild used in server discovery and notices from Discord; defaults to \"en-US\""
                    },
                    "features": {
                        "location": "json",
                        "type": "array",
                        "description": "enabled guild features"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the server description to show in the welcome screen"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of channel"
                    },
                    "topic": {
                        "location": "json",
                        "type": "string",
                        "description": "channel topic (0-1024 characters)"
                    },
                    "bitrate": {
                        "location": "json",
                        "type": "integer",
                        "description": "the bitrate (in bits) of the voice channel (voice only)"
                    },
                    "user_limit": {
                        "location": "json",
                        "type": "integer",
                        "description": "the user limit of the voice channel (voice only)"
                    },
                    "rate_limit_per_user": {
                        "location": "json",
                        "type": "integer",
                        "description": "amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected"
                    },
                    "position": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "sorting position of the channel"
                    },
                    "permission_overwrites": {
                        "location": "json",
                        "type": "array",
                        "description": "the channel's permission overwrites"
                    },
                    "parent_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the new parent ID for the channel that is moved"
                    },
                    "nsfw": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the channel is nsfw",
                        "default": false
                    },
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "role"
                    },
                    "lock_permissions": {
                        "location": "json",
                        "type": "boolean",
                        "nullable": true,
                        "description": "syncs the permission overwrites with the new parent, if moving to a new category",
                        "default": false
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of members to return (1-1000)",
                        "default": 1
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "the highest user id in the previous page"
                    },
                    "query": {
                        "location": "query",
                        "type": "string",
                        "description": "Query string to match username(s) and nickname(s) against.",
                        "default": ""
                    },
                    "access_token": {
                        "location": "json",
                        "type": "string",
                        "description": "an oauth2 access token granted with the guilds.join to the bot's application for the user you want to add to the guild",
                        "extra": {
                            "Permission": ""
                        }
                    },
                    "nick": {
                        "location": "json",
                        "type": "string",
                        "description": "value to set users nickname to",
                        "extra": {
                            "Permission": "MANAGE_NICKNAMES"
                        }
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "array of role ids the member is assigned",
                        "extra": {
                            "Permission": "MANAGE_ROLES"
                        }
                    },
                    "mute": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is muted in voice channels. Will throw a 400 if the user is not in a voice channel",
                        "default": false,
                        "extra": {
                            "Permission": "MUTE_MEMBERS"
                        }
                    },
                    "deaf": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is deafened in voice channels. Will throw a 400 if the user is not in a voice channel",
                        "default": false,
                        "extra": {
                            "Permission": "DEAFEN_MEMBERS"
                        }
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the channel the user is currently in"
                    },
                    "?nick": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "value to set users nickname to",
                        "extra": {
                            "Permission": "CHANGE_NICKNAME"
                        }
                    },
                    "delete_message_days?": {
                        "location": "json",
                        "type": "integer",
                        "description": "number of days to delete messages for (0-7)"
                    },
                    "reason?": {
                        "location": "json",
                        "type": "string",
                        "description": "reason for the prune",
                        "default": ""
                    },
                    "permissions": {
                        "location": "json",
                        "type": "string",
                        "description": "bitwise value of the enabled/disabled permissions"
                    },
                    "color": {
                        "location": "json",
                        "type": "integer",
                        "description": "RGB color value"
                    },
                    "hoist": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the role should be displayed separately in the sidebar",
                        "default": false
                    },
                    "mentionable": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the role should be mentionable",
                        "default": false
                    },
                    "?position": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "sorting position of the role"
                    },
                    "days": {
                        "location": "json",
                        "type": "integer",
                        "description": "number of days to prune (1-30)",
                        "default": 7
                    },
                    "include_roles": {
                        "location": "json",
                        "type": "array",
                        "description": "role(s) to include",
                        "default": "none"
                    },
                    "compute_prune_count": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether 'pruned' is returned, discouraged for large guilds",
                        "default": true
                    },
                    "style": {
                        "location": "query",
                        "type": "string",
                        "description": "style of the widget image returned (see below)",
                        "default": "shield"
                    },
                    "enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the welcome screen is enabled",
                        "default": false
                    },
                    "welcome_channels": {
                        "location": "json",
                        "type": "array",
                        "description": "channels linked in the welcome screen and their display options"
                    },
                    "suppress?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "toggles the user's suppress state",
                        "default": false
                    },
                    "request_to_speak_timestamp?": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "sets the user's request to speak"
                    }
                }
            },
            "role": {
                "category": "guild",
                "description": "Roles represent a set of permissions attached to a group of users. Roles have unique names, colors, and can be pinned to the side bar, causing their members to be listed separately. Roles are unique per guild, and can have separate permission profiles for the global context (guild) and channel context.",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "snowflake",
                        "description": "role id"
                    },
                    "name": {
                        "type": "string",
                        "description": "role name"
                    },
                    "color": {
                        "type": "integer",
                        "description": "integer representation of hexadecimal color code"
                    },
                    "hoist": {
                        "type": "bool",
                        "description": "if this role is pinned in the user listing"
                    },
                    "position": {
                        "type": "integer",
                        "description": "position of this role"
                    },
                    "permissions": {
                        "type": "integer",
                        "description": "permission bit set"
                    },
                    "managed": {
                        "type": "bool",
                        "description": "whether this role is managed by an integration"
                    },
                    "mentionable": {
                        "type": "bool",
                        "description": "whether this role is mentionable"
                    }
                }
            }
        },
        "audit-log": {
            "auditLog": {
                "link": "https://discordapp.com/developers/docs/resources/audit-log#audit-log-object",
                "resource": "audit-log",
                "description": "",
                "type": "object",
                "properties": {
                    "webhooks": {
                        "location": "json",
                        "type": "array",
                        "description": "list of webhooks found in the audit log"
                    },
                    "users": {
                        "location": "json",
                        "type": "array",
                        "description": "list of users found in the audit log"
                    },
                    "audit_log_entries": {
                        "location": "json",
                        "type": "array",
                        "description": "list of audit log entries"
                    },
                    "integrations": {
                        "location": "json",
                        "type": "array",
                        "description": "list of partial integration objects"
                    }
                }
            },
            "auditLogEntry": {
                "link": "https://discordapp.com/developers/docs/resources/audit-log#audit-log-entry-object",
                "resource": "audit-log",
                "description": "",
                "type": "object",
                "properties": {
                    "target_id": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "id of the affected entity (webhook, user, role, etc.)"
                    },
                    "changes?": {
                        "location": "json",
                        "type": "array",
                        "description": "changes made to the target_id"
                    },
                    "user_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the user who made the changes"
                    },
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the entry"
                    },
                    "action_type": {
                        "location": "json",
                        "type": "audit log event",
                        "description": "type of action that occurred"
                    },
                    "options?": {
                        "location": "json",
                        "type": "optional audit entry info",
                        "description": "additional info for certain action types"
                    },
                    "reason?": {
                        "location": "json",
                        "type": "string",
                        "description": "the reason for the change (0-512 characters)"
                    }
                }
            },
            "auditLogChange": {
                "link": "https://discordapp.com/developers/docs/resources/audit-log#audit-log-change-object",
                "resource": "audit-log",
                "description": "",
                "type": "object",
                "properties": {
                    "user_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "filter the log for actions made by a user"
                    },
                    "action_type": {
                        "location": "query",
                        "type": "integer",
                        "description": "the type of audit log event"
                    },
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "filter the log before a certain entry id"
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "how many entries are returned (default 50, minimum 1, maximum 100)"
                    }
                }
            }
        },
        "channel": {
            "channel": {
                "link": "https://discordapp.com/developers/docs/resources/channel#channel-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of this channel"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of channel"
                    },
                    "guild_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the guild (may be missing for some channel objects received over gateway guild dispatches)"
                    },
                    "position?": {
                        "location": "json",
                        "type": "integer",
                        "description": "sorting position of the channel"
                    },
                    "permission_overwrites?": {
                        "location": "json",
                        "type": "array",
                        "description": "explicit permission overwrites for members and roles"
                    },
                    "name?": {
                        "location": "json",
                        "type": "string",
                        "description": "the name of the channel (1-100 characters)"
                    },
                    "topic?": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the channel topic (0-1024 characters)"
                    },
                    "nsfw?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the channel is nsfw",
                        "default": false
                    },
                    "last_message_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the last message sent in this channel (may not point to an existing or valid message)"
                    },
                    "bitrate?": {
                        "location": "json",
                        "type": "integer",
                        "description": "the bitrate (in bits) of the voice channel"
                    },
                    "user_limit?": {
                        "location": "json",
                        "type": "integer",
                        "description": "the user limit of the voice channel"
                    },
                    "rate_limit_per_user?": {
                        "location": "json",
                        "type": "integer",
                        "description": "amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected"
                    },
                    "recipients?": {
                        "location": "json",
                        "type": "array",
                        "description": "the recipients of the DM"
                    },
                    "icon?": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "icon hash"
                    },
                    "owner_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the creator of the group DM or thread"
                    },
                    "application_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "application id of the group DM creator if it is bot-created"
                    },
                    "parent_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "for guild channels: id of the parent category for a channel (each parent category can contain up to 50 channels), for threads: id of the text channel this thread was created"
                    },
                    "last_pin_timestamp?": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "when the last pinned message was pinned. This may be null in events such as GUILD_CREATE when a message is not pinned."
                    },
                    "rtc_region?": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "voice region id for the voice channel, automatic when set to null"
                    },
                    "video_quality_mode?": {
                        "location": "json",
                        "type": "integer",
                        "description": "the camera video quality mode of the voice channel, 1 when not present"
                    },
                    "message_count?": {
                        "location": "json",
                        "type": "integer",
                        "description": "an approximate count of messages in a thread, stops counting at 50"
                    },
                    "member_count?": {
                        "location": "json",
                        "type": "integer",
                        "description": "an approximate count of users in a thread, stops counting at 50"
                    },
                    "thread_metadata?": {
                        "location": "json",
                        "type": "object",
                        "description": "thread-specific fields not needed by other channels"
                    },
                    "member?": {
                        "location": "json",
                        "type": "object",
                        "description": "thread member object for the current user, if they have joined the thread, only included on certain API endpoints"
                    },
                    "default_auto_archive_duration?": {
                        "location": "json",
                        "type": "integer",
                        "description": "default duration for newly created threads, in minutes, to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080"
                    }
                }
            },
            "message": {
                "link": "https://discordapp.com/developers/docs/resources/channel#message-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the sticker"
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the channel the message was sent in"
                    },
                    "guild_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the guild that owns this sticker"
                    },
                    "author": {
                        "location": "json",
                        "type": "object",
                        "description": "the author of this message (not guaranteed to be a valid user, see below)"
                    },
                    "member?*": {
                        "location": "json",
                        "type": "object",
                        "description": "member properties for this message's author"
                    },
                    "content": {
                        "location": "json",
                        "type": "string",
                        "description": "contents of the message"
                    },
                    "timestamp": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when this message was sent"
                    },
                    "edited_timestamp": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "when this message was edited (or null if never)"
                    },
                    "tts": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this was a TTS message",
                        "default": false
                    },
                    "mention_everyone": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this message mentions everyone",
                        "default": false
                    },
                    "mentions**": {
                        "location": "json",
                        "type": "array",
                        "description": "users specifically mentioned in the message"
                    },
                    "mention_roles": {
                        "location": "json",
                        "type": "array",
                        "description": "roles specifically mentioned in this message"
                    },
                    "mention_channels?***": {
                        "location": "json",
                        "type": "array",
                        "description": "channels specifically mentioned in this message"
                    },
                    "attachments": {
                        "location": "json",
                        "type": "array",
                        "description": "any attached files"
                    },
                    "embeds": {
                        "location": "json",
                        "type": "array",
                        "description": "any embedded content"
                    },
                    "reactions?": {
                        "location": "json",
                        "type": "array",
                        "description": "reactions to the message"
                    },
                    "nonce?": {
                        "location": "json",
                        "type": "integer or string",
                        "description": "used for validating a message was sent"
                    },
                    "pinned": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this message is pinned",
                        "default": false
                    },
                    "webhook_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "if the message is generated by a webhook, this is the webhook's id"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "type of message activity"
                    },
                    "activity?": {
                        "location": "json",
                        "type": "object",
                        "description": "sent with Rich Presence-related chat embeds"
                    },
                    "application?": {
                        "location": "json",
                        "type": "object",
                        "description": "sent with Rich Presence-related chat embeds"
                    },
                    "application_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "if the message is a response to an Interaction, this is the id of the interaction's application"
                    },
                    "message_reference?": {
                        "location": "json",
                        "type": "object",
                        "description": "data showing the source of a crosspost, channel follow add, pin, or reply message"
                    },
                    "flags?": {
                        "location": "json",
                        "type": "integer",
                        "description": "message flags combined as a bitfield"
                    },
                    "stickers?": {
                        "location": "json",
                        "type": "array",
                        "description": "Deprecated the stickers sent with the message (bots currently can only receive messages with stickers, not send)"
                    },
                    "referenced_message?****": {
                        "location": "json",
                        "type": "object",
                        "nullable": true,
                        "description": "the message associated with the message_reference"
                    },
                    "interaction?": {
                        "location": "json",
                        "type": "object",
                        "description": "sent if the message is a response to an Interaction"
                    },
                    "thread?": {
                        "location": "json",
                        "type": "object",
                        "description": "the thread that was started from this message, includes thread member object"
                    },
                    "components?": {
                        "location": "json",
                        "type": "Array of message components",
                        "description": "sent if the message contains components like buttons, action rows, or other interactive components"
                    },
                    "party_id?": {
                        "location": "json",
                        "type": "string",
                        "description": "party_id from a Rich Presence event"
                    },
                    "pack_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the pack the sticker is from"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the sticker"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "description of the sticker"
                    },
                    "tags": {
                        "location": "json",
                        "type": "string",
                        "description": "a unicode emoji representing the sticker's expression"
                    },
                    "asset": {
                        "location": "json",
                        "type": "string",
                        "description": "Deprecated previously the sticker asset hash, now an empty string"
                    },
                    "format_type": {
                        "location": "json",
                        "type": "integer",
                        "description": "type of sticker format"
                    },
                    "available?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether or not the sticker is available",
                        "default": false
                    },
                    "user?": {
                        "location": "json",
                        "type": "object",
                        "description": "the user that uploaded the sticker"
                    },
                    "sort_value?": {
                        "location": "json",
                        "type": "integer",
                        "description": "a sticker's sort order within a pack"
                    }
                }
            },
            "messageReference": {
                "link": "https://discordapp.com/developers/docs/resources/channel#message-reference-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "message_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the originating message"
                    },
                    "channel_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the originating message's channel"
                    },
                    "guild_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the originating message's guild"
                    },
                    "fail_if_not_exists?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "when sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true",
                        "default": false
                    }
                }
            },
            "followedChannel": {
                "link": "https://discordapp.com/developers/docs/resources/channel#followed-channel-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "source channel id"
                    },
                    "webhook_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "created target webhook id"
                    }
                }
            },
            "reaction": {
                "link": "https://discordapp.com/developers/docs/resources/channel#reaction-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "count": {
                        "location": "json",
                        "type": "integer",
                        "description": "times this emoji has been used to react"
                    },
                    "me": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the current user reacted using this emoji",
                        "default": false
                    },
                    "emoji": {
                        "location": "json",
                        "type": "object",
                        "description": "emoji information"
                    }
                }
            },
            "overwrite": {
                "link": "https://discordapp.com/developers/docs/resources/channel#overwrite-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "role or user id"
                    },
                    "type": {
                        "location": "json",
                        "type": "int",
                        "description": "either 0 (role) or 1 (member)"
                    },
                    "allow": {
                        "location": "json",
                        "type": "string",
                        "description": "permission bit set"
                    },
                    "deny": {
                        "location": "json",
                        "type": "string",
                        "description": "permission bit set"
                    }
                }
            },
            "threadMetadata": {
                "link": "https://discordapp.com/developers/docs/resources/channel#thread-metadata-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "archived": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the thread is archived",
                        "default": false
                    },
                    "auto_archive_duration": {
                        "location": "json",
                        "type": "integer",
                        "description": "duration in minutes to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080"
                    },
                    "archive_timestamp": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "timestamp when the thread's archive status was last changed, used for calculating recent activity"
                    },
                    "locked?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "when a thread is locked, only users with MANAGE_THREADS can unarchive it",
                        "default": false
                    }
                }
            },
            "threadMember": {
                "link": "https://discordapp.com/developers/docs/resources/channel#thread-member-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the thread"
                    },
                    "user_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the user"
                    },
                    "join_timestamp": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "the time the current user last joined the thread"
                    },
                    "flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "any user-thread settings, currently only used for notifications"
                    }
                }
            },
            "embed": {
                "link": "https://discordapp.com/developers/docs/resources/channel#embed-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "title?": {
                        "location": "json",
                        "type": "string",
                        "description": "title of embed"
                    },
                    "type?": {
                        "location": "json",
                        "type": "string",
                        "description": "type of embed (always \"rich\" for webhook embeds)"
                    },
                    "description?": {
                        "location": "json",
                        "type": "string",
                        "description": "description of embed"
                    },
                    "url?": {
                        "location": "json",
                        "type": "string",
                        "description": "url of author"
                    },
                    "timestamp?": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "timestamp of embed content"
                    },
                    "color?": {
                        "location": "json",
                        "type": "integer",
                        "description": "color code of the embed"
                    },
                    "footer?": {
                        "location": "json",
                        "type": "object",
                        "description": "footer information"
                    },
                    "image?": {
                        "location": "json",
                        "type": "object",
                        "description": "image information"
                    },
                    "thumbnail?": {
                        "location": "json",
                        "type": "object",
                        "description": "thumbnail information"
                    },
                    "video?": {
                        "location": "json",
                        "type": "object",
                        "description": "video information"
                    },
                    "provider?": {
                        "location": "json",
                        "type": "object",
                        "description": "provider information"
                    },
                    "author?": {
                        "location": "json",
                        "type": "object",
                        "description": "author information"
                    },
                    "fields?": {
                        "location": "json",
                        "type": "array",
                        "description": "fields information"
                    },
                    "proxy_url?": {
                        "location": "json",
                        "type": "string",
                        "description": "a proxied url of the image"
                    },
                    "height?": {
                        "location": "json",
                        "type": "integer",
                        "description": "height of image"
                    },
                    "width?": {
                        "location": "json",
                        "type": "integer",
                        "description": "width of image"
                    },
                    "name?": {
                        "location": "json",
                        "type": "string",
                        "description": "name of author"
                    },
                    "icon_url?": {
                        "location": "json",
                        "type": "string",
                        "description": "url of footer icon (only supports http(s) and attachments)"
                    },
                    "proxy_icon_url?": {
                        "location": "json",
                        "type": "string",
                        "description": "a proxied url of footer icon"
                    },
                    "text": {
                        "location": "json",
                        "type": "string",
                        "description": "footer text"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the field"
                    },
                    "value": {
                        "location": "json",
                        "type": "string",
                        "description": "value of the field"
                    },
                    "inline?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether or not this field should display inline",
                        "default": false
                    }
                }
            },
            "attachment": {
                "link": "https://discordapp.com/developers/docs/resources/channel#attachment-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "attachment id"
                    },
                    "filename": {
                        "location": "json",
                        "type": "string",
                        "description": "name of file attached"
                    },
                    "content_type?": {
                        "location": "json",
                        "type": "string",
                        "description": "the attachment's media type"
                    },
                    "size": {
                        "location": "json",
                        "type": "integer",
                        "description": "size of file in bytes"
                    },
                    "url": {
                        "location": "json",
                        "type": "string",
                        "description": "source url of file"
                    },
                    "proxy_url": {
                        "location": "json",
                        "type": "string",
                        "description": "a proxied url of file"
                    },
                    "height?": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "height of file (if image)"
                    },
                    "width?": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "width of file (if image)"
                    }
                }
            },
            "channelMention": {
                "link": "https://discordapp.com/developers/docs/resources/channel#channel-mention-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the channel"
                    },
                    "guild_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the guild containing the channel"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of channel"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the name of the channel"
                    }
                }
            },
            "allowedMentions": {
                "link": "https://discordapp.com/developers/docs/resources/channel#allowed-mentions-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "parse": {
                        "location": "json",
                        "type": "array",
                        "description": "An array of allowed mention types to parse from the content."
                    },
                    "roles": {
                        "location": "json",
                        "type": "list of snowflakes",
                        "description": "Array of role_ids to mention (Max size of 100)"
                    },
                    "users": {
                        "location": "json",
                        "type": "list of snowflakes",
                        "description": "Array of user_ids to mention (Max size of 100)"
                    },
                    "replied_user": {
                        "location": "json",
                        "type": "boolean",
                        "description": "For replies, whether to mention the author of the message being replied to (default false)",
                        "default": false
                    }
                }
            }
        },
        "emoji": {
            "emoji": {
                "link": "https://discordapp.com/developers/docs/resources/emoji#emoji-object",
                "resource": "emoji",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "emoji id"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the emoji"
                    },
                    "roles?": {
                        "location": "json",
                        "type": "array",
                        "description": "roles allowed to use this emoji"
                    },
                    "user?": {
                        "location": "json",
                        "type": "object",
                        "description": "user that created this emoji"
                    },
                    "require_colons?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this emoji must be wrapped in colons",
                        "default": false
                    },
                    "managed?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this emoji is managed",
                        "default": false
                    },
                    "animated?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this emoji is animated",
                        "default": false
                    },
                    "available?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this emoji can be used, may be false due to loss of Server Boosts",
                        "default": false
                    },
                    "image": {
                        "location": "json",
                        "type": "image data",
                        "description": "the 128x128 emoji image"
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "nullable": true,
                        "description": "roles allowed to use this emoji"
                    }
                }
            }
        },
        "invite": {
            "invite": {
                "link": "https://discordapp.com/developers/docs/resources/invite#invite-object",
                "resource": "invite",
                "description": "",
                "type": "object",
                "properties": {
                    "code": {
                        "location": "json",
                        "type": "string",
                        "description": "the invite code (unique ID)"
                    },
                    "guild?": {
                        "location": "json",
                        "type": "object",
                        "description": "the guild this invite is for"
                    },
                    "channel": {
                        "location": "json",
                        "type": "object",
                        "description": "the channel this invite is for"
                    },
                    "inviter?": {
                        "location": "json",
                        "type": "object",
                        "description": "the user who created the invite"
                    },
                    "target_type?": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of target for this voice channel invite"
                    },
                    "target_user?": {
                        "location": "json",
                        "type": "object",
                        "description": "the user whose stream to display for this voice channel stream invite"
                    },
                    "target_application?": {
                        "location": "json",
                        "type": "object",
                        "description": "the embedded application to open for this voice channel embedded application invite"
                    },
                    "approximate_presence_count?": {
                        "location": "json",
                        "type": "integer",
                        "description": "approximate count of online members, returned from the GET /invites/<code> endpoint when with_counts is true"
                    },
                    "approximate_member_count?": {
                        "location": "json",
                        "type": "integer",
                        "description": "approximate count of total members, returned from the GET /invites/<code> endpoint when with_counts is true"
                    },
                    "expires_at?": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "the expiration date of this invite, returned from the GET /invites/<code> endpoint when with_expiration is true"
                    },
                    "stage_instance?": {
                        "location": "json",
                        "type": "object",
                        "description": "stage instance data if there is a public Stage instance in the Stage channel this invite is for"
                    }
                }
            },
            "inviteMetadata": {
                "link": "https://discordapp.com/developers/docs/resources/invite#invite-metadata-object",
                "resource": "invite",
                "description": "",
                "type": "object",
                "properties": {
                    "uses": {
                        "location": "json",
                        "type": "integer",
                        "description": "number of times this invite has been used"
                    },
                    "max_uses": {
                        "location": "json",
                        "type": "integer",
                        "description": "max number of times this invite can be used"
                    },
                    "max_age": {
                        "location": "json",
                        "type": "integer",
                        "description": "duration (in seconds) after which the invite expires"
                    },
                    "temporary": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this invite only grants temporary membership",
                        "default": false
                    },
                    "created_at": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when this invite was created"
                    }
                }
            },
            "inviteStageInstance": {
                "link": "https://discordapp.com/developers/docs/resources/invite#invite-stage-instance-object",
                "resource": "invite",
                "description": "",
                "type": "object",
                "properties": {
                    "members": {
                        "location": "json",
                        "type": "array",
                        "description": "the members speaking in the Stage"
                    },
                    "participant_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "the number of users in the Stage"
                    },
                    "speaker_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "the number of users speaking in the Stage"
                    },
                    "topic": {
                        "location": "json",
                        "type": "string",
                        "description": "the topic of the Stage instance (1-120 characters)"
                    },
                    "with_counts?": {
                        "location": "query",
                        "type": "boolean",
                        "description": "whether the invite should contain approximate member counts",
                        "default": false
                    },
                    "with_expiration?": {
                        "location": "query",
                        "type": "boolean",
                        "description": "whether the invite should contain the expiration date",
                        "default": false
                    }
                }
            }
        },
        "user": {
            "user": {
                "link": "https://discordapp.com/developers/docs/resources/user#user-object",
                "resource": "user",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the user's id",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "username": {
                        "location": "json",
                        "type": "string",
                        "description": "the user's username, not unique across the platform",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "discriminator": {
                        "location": "json",
                        "type": "string",
                        "description": "the user's 4-digit discord-tag",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "avatar": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the user's avatar hash",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "bot?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user belongs to an OAuth2 application",
                        "default": false,
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "system?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is an Official Discord System user (part of the urgent message system)",
                        "default": false,
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "mfa_enabled?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user has two factor enabled on their account",
                        "default": false,
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "locale?": {
                        "location": "json",
                        "type": "string",
                        "description": "the user's chosen language option",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "verified?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the email on this account has been verified",
                        "default": false,
                        "extra": {
                            "Required OAuth2 Scope": "email"
                        }
                    },
                    "email?": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the user's email",
                        "extra": {
                            "Required OAuth2 Scope": "email"
                        }
                    },
                    "flags?": {
                        "location": "json",
                        "type": "integer",
                        "description": "the flags on a user's account",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "premium_type?": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of Nitro subscription on a user's account",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "public_flags?": {
                        "location": "json",
                        "type": "integer",
                        "description": "the public flags on a user's account",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    }
                }
            },
            "connection": {
                "link": "https://discordapp.com/developers/docs/resources/user#connection-object",
                "resource": "user",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "string",
                        "description": "id of the connection account"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the username of the connection account"
                    },
                    "type": {
                        "location": "json",
                        "type": "string",
                        "description": "the service of the connection (twitch, youtube)"
                    },
                    "revoked?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the connection is revoked",
                        "default": false
                    },
                    "integrations?": {
                        "location": "json",
                        "type": "array",
                        "description": "an array of partial server integrations"
                    },
                    "verified": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the connection is verified",
                        "default": false
                    },
                    "friend_sync": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether friend sync is enabled for this connection",
                        "default": false
                    },
                    "show_activity": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether activities related to this connection will be shown in presence updates",
                        "default": false
                    },
                    "visibility": {
                        "location": "json",
                        "type": "integer",
                        "description": "visibility of this connection"
                    },
                    "username": {
                        "location": "json",
                        "type": "string",
                        "description": "user's username, if changed may cause the user's discriminator to be randomized."
                    },
                    "avatar": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "if passed, modifies the user's avatar"
                    },
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get guilds before this guild ID",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get guilds after this guild ID",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of guilds to return (1-200)",
                        "default": 200,
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "recipient_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the recipient to open a DM channel with"
                    },
                    "access_tokens": {
                        "location": "json",
                        "type": "array",
                        "description": "access tokens of users that have granted your app the gdm.join scope"
                    },
                    "nicks": {
                        "location": "json",
                        "type": "dict",
                        "description": "a dictionary of user ids to their respective nicknames"
                    }
                }
            }
        },
        "voice": {
            "voiceState": {
                "link": "https://discordapp.com/developers/docs/resources/voice#voice-state-object",
                "resource": "voice",
                "description": "",
                "type": "object",
                "properties": {
                    "guild_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the guild id this voice state is for"
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the channel id this user is connected to"
                    },
                    "user_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the user id this voice state is for"
                    },
                    "member?": {
                        "location": "json",
                        "type": "object",
                        "description": "the guild member this voice state is for"
                    },
                    "session_id": {
                        "location": "json",
                        "type": "string",
                        "description": "the session id for this voice state"
                    },
                    "deaf": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user is deafened by the server",
                        "default": false
                    },
                    "mute": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user is muted by the server",
                        "default": false
                    },
                    "self_deaf": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user is locally deafened",
                        "default": false
                    },
                    "self_mute": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user is locally muted",
                        "default": false
                    },
                    "self_stream?": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user is streaming using \"Go Live\"",
                        "default": false
                    },
                    "self_video": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user's camera is enabled",
                        "default": false
                    },
                    "suppress": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user is muted by the current user",
                        "default": false
                    },
                    "request_to_speak_timestamp": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "the time at which the user requested to speak"
                    }
                }
            },
            "voiceRegion": {
                "link": "https://discordapp.com/developers/docs/resources/voice#voice-region-object",
                "resource": "voice",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "string",
                        "description": "unique ID for the region"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the region"
                    },
                    "vip": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if this is a vip-only server",
                        "default": false
                    },
                    "optimal": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true for a single server that is closest to the current user's client",
                        "default": false
                    },
                    "deprecated": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this is a deprecated voice region (avoid switching to these)",
                        "default": false
                    },
                    "custom": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this is a custom voice region (used for events/etc)",
                        "default": false
                    }
                }
            }
        },
        "webhook": {
            "webhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#webhook-object",
                "resource": "webhook",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the webhook"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of the webhook"
                    },
                    "guild_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the guild id this webhook is for, if any"
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the new channel id this webhook should be moved to"
                    },
                    "user?": {
                        "location": "json",
                        "type": "object",
                        "description": "the user this webhook was created by (not returned when getting a webhook with its token)"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the default name of the webhook"
                    },
                    "avatar": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "image for the default webhook avatar"
                    },
                    "token?": {
                        "location": "json",
                        "type": "string",
                        "description": "the secure token of the webhook (returned for Incoming Webhooks)"
                    },
                    "application_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the bot/OAuth2 application that created this webhook"
                    },
                    "source_guild?": {
                        "location": "json",
                        "type": "object",
                        "description": "the guild of the channel that this webhook is following (returned for Channel Follower Webhooks)"
                    },
                    "source_channel?": {
                        "location": "json",
                        "type": "object",
                        "description": "the channel that this webhook is following (returned for Channel Follower Webhooks)"
                    },
                    "url?": {
                        "location": "json",
                        "type": "string",
                        "description": "the url used for executing the webhook (returned by the webhooks OAuth2 flow)"
                    },
                    "avatar?": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "image for the default webhook avatar"
                    },
                    "wait": {
                        "location": "query",
                        "type": "boolean",
                        "description": "waits for server confirmation of message send before response (defaults to true; when false a message that is not saved does not return an error)",
                        "default": false,
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "thread_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "Send a message to the specified thread within a webhook's channel. The thread will automatically be unarchived.",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "content": {
                        "location": "json",
                        "type": "string",
                        "description": "the message contents (up to 2000 characters)"
                    },
                    "username": {
                        "location": "json",
                        "type": "string",
                        "description": "override the default username of the webhook",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "avatar_url": {
                        "location": "json",
                        "type": "string",
                        "description": "override the default avatar of the webhook",
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "tts": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if this is a TTS message",
                        "default": false,
                        "extra": {
                            "Required": "false"
                        }
                    },
                    "file": {
                        "location": "json",
                        "type": "file contents",
                        "description": "the contents of the file being sent/edited"
                    },
                    "embeds": {
                        "location": "json",
                        "type": "array",
                        "description": "embedded rich content"
                    },
                    "payload_json": {
                        "location": "json",
                        "type": "string",
                        "description": "JSON encoded body of non-file params (multipart/form-data only)"
                    },
                    "allowed_mentions": {
                        "location": "json",
                        "type": "object",
                        "description": "allowed mentions for the message"
                    },
                    "components": {
                        "location": "json",
                        "type": "array",
                        "description": "the components to include with the message"
                    },
                    "attachments": {
                        "location": "json",
                        "type": "array",
                        "description": "attached files to keep"
                    }
                }
            }
        },
        "gateway": {
            "sessionStartLimit": {
                "link": "https://discordapp.com/developers/docs/topics/gateway#session-start-limit-object",
                "resource": "gateway",
                "description": "",
                "type": "object",
                "properties": {
                    "total": {
                        "location": "json",
                        "type": "integer",
                        "description": "The total number of session starts the current user is allowed"
                    },
                    "remaining": {
                        "location": "json",
                        "type": "integer",
                        "description": "The remaining number of session starts the current user is allowed"
                    },
                    "reset_after": {
                        "location": "json",
                        "type": "integer",
                        "description": "The number of milliseconds after which the limit resets"
                    },
                    "max_concurrency": {
                        "location": "json",
                        "type": "integer",
                        "description": "The number of identify requests allowed per 5 seconds"
                    }
                }
            }
        },
        "oauth2": {},
        "permissions": {
            "role": {
                "link": "https://discordapp.com/developers/docs/topics/permissions#role-object",
                "resource": "permissions",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "role id"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "role name"
                    },
                    "color": {
                        "location": "json",
                        "type": "integer",
                        "description": "integer representation of hexadecimal color code"
                    },
                    "hoist": {
                        "location": "json",
                        "type": "boolean",
                        "description": "if this role is pinned in the user listing",
                        "default": false
                    },
                    "position": {
                        "location": "json",
                        "type": "integer",
                        "description": "position of this role"
                    },
                    "permissions": {
                        "location": "json",
                        "type": "string",
                        "description": "permission bit set"
                    },
                    "managed": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this role is managed by an integration",
                        "default": false
                    },
                    "mentionable": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this role is mentionable",
                        "default": false
                    },
                    "tags?": {
                        "location": "json",
                        "type": "object",
                        "description": "the tags this role has"
                    },
                    "bot_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the bot this role belongs to"
                    },
                    "integration_id?": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the integration this role belongs to"
                    },
                    "premium_subscriber?": {
                        "location": "json",
                        "type": "null",
                        "description": "whether this is the guild's premium subscriber role"
                    }
                }
            }
        }
    }
}